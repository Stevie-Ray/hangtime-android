# compiler: R8
# compiler_version: 2.0.74
# min_api: 19
# pg_map_id: a868d64
# common_typos_disable
android.support.customtabs.ICustomTabsCallback -> a.a.a.a:
    void onRelationshipValidationResult(int,android.net.Uri,boolean,android.os.Bundle) -> C
    void onPostMessage(java.lang.String,android.os.Bundle) -> d
    void extraCallback(java.lang.String,android.os.Bundle) -> k
    void onMessageChannelReady(android.os.Bundle) -> p
    android.os.Bundle extraCallbackWithResult(java.lang.String,android.os.Bundle) -> x
    void onNavigationEvent(int,android.os.Bundle) -> y
android.support.customtabs.ICustomTabsCallback$Stub -> a.a.a.a$a:
android.support.customtabs.ICustomTabsService -> a.a.a.b:
    boolean validateRelationship(android.support.customtabs.ICustomTabsCallback,int,android.net.Uri,android.os.Bundle) -> A
    boolean receiveFile(android.support.customtabs.ICustomTabsCallback,android.net.Uri,int,android.os.Bundle) -> E
    boolean newSessionWithExtras(android.support.customtabs.ICustomTabsCallback,android.os.Bundle) -> b
    boolean warmup(long) -> t
    boolean newSession(android.support.customtabs.ICustomTabsCallback) -> w
android.support.customtabs.ICustomTabsService$Stub -> a.a.a.b$a:
    android.support.customtabs.ICustomTabsService asInterface(android.os.IBinder) -> G
    android.support.customtabs.ICustomTabsService getDefaultImpl() -> H
android.support.customtabs.ICustomTabsService$Stub$Proxy -> a.a.a.b$a$a:
    android.os.IBinder mRemote -> a
    android.support.customtabs.ICustomTabsService sDefaultImpl -> b
    boolean validateRelationship(android.support.customtabs.ICustomTabsCallback,int,android.net.Uri,android.os.Bundle) -> A
    boolean receiveFile(android.support.customtabs.ICustomTabsCallback,android.net.Uri,int,android.os.Bundle) -> E
    boolean newSessionWithExtras(android.support.customtabs.ICustomTabsCallback,android.os.Bundle) -> b
    boolean warmup(long) -> t
    boolean newSession(android.support.customtabs.ICustomTabsCallback) -> w
android.support.customtabs.trusted.ITrustedWebActivityCallback -> a.a.a.c.a:
    void onExtraCallback(java.lang.String,android.os.Bundle) -> n
android.support.customtabs.trusted.ITrustedWebActivityCallback$Stub -> a.a.a.c.a$a:
    android.support.customtabs.trusted.ITrustedWebActivityCallback asInterface(android.os.IBinder) -> G
    android.support.customtabs.trusted.ITrustedWebActivityCallback getDefaultImpl() -> H
android.support.customtabs.trusted.ITrustedWebActivityCallback$Stub$Proxy -> a.a.a.c.a$a$a:
    android.os.IBinder mRemote -> a
    android.support.customtabs.trusted.ITrustedWebActivityCallback sDefaultImpl -> b
    void onExtraCallback(java.lang.String,android.os.Bundle) -> n
android.support.customtabs.trusted.ITrustedWebActivityService -> a.a.a.c.b:
    android.os.Bundle getSmallIconBitmap() -> B
    android.os.Bundle areNotificationsEnabled(android.os.Bundle) -> a
    android.os.Bundle getActiveNotifications() -> i
    int getSmallIconId() -> q
    void cancelNotification(android.os.Bundle) -> r
    android.os.Bundle extraCommand(java.lang.String,android.os.Bundle,android.os.IBinder) -> s
    android.os.Bundle notifyNotificationWithChannel(android.os.Bundle) -> z
android.support.customtabs.trusted.ITrustedWebActivityService$Stub -> a.a.a.c.b$a:
androidx.browser.R$dimen -> b.a.a:
androidx.browser.browseractions.BrowserActionsFallbackMenuView -> androidx.browser.browseractions.BrowserActionsFallbackMenuView:
    int mBrowserActionsMenuMaxWidthPx -> b
    int mBrowserActionsMenuMinPaddingPx -> a
androidx.browser.customtabs.CustomTabColorSchemeParams -> b.a.b.a:
    java.lang.Integer navigationBarColor -> c
    java.lang.Integer navigationBarDividerColor -> d
    java.lang.Integer toolbarColor -> a
    java.lang.Integer secondaryToolbarColor -> b
    androidx.browser.customtabs.CustomTabColorSchemeParams fromBundle(android.os.Bundle) -> a
    android.os.Bundle toBundle() -> b
    androidx.browser.customtabs.CustomTabColorSchemeParams withDefaults(androidx.browser.customtabs.CustomTabColorSchemeParams) -> c
androidx.browser.customtabs.CustomTabColorSchemeParams$Builder -> b.a.b.a$a:
    java.lang.Integer mNavigationBarColor -> c
    java.lang.Integer mNavigationBarDividerColor -> d
    java.lang.Integer mToolbarColor -> a
    java.lang.Integer mSecondaryToolbarColor -> b
    androidx.browser.customtabs.CustomTabColorSchemeParams build() -> a
    androidx.browser.customtabs.CustomTabColorSchemeParams$Builder setNavigationBarColor(int) -> b
    androidx.browser.customtabs.CustomTabColorSchemeParams$Builder setNavigationBarDividerColor(int) -> c
    androidx.browser.customtabs.CustomTabColorSchemeParams$Builder setToolbarColor(int) -> d
androidx.browser.customtabs.CustomTabsCallback -> b.a.b.b:
    void extraCallback(java.lang.String,android.os.Bundle) -> a
    android.os.Bundle extraCallbackWithResult(java.lang.String,android.os.Bundle) -> b
    void onMessageChannelReady(android.os.Bundle) -> c
    void onNavigationEvent(int,android.os.Bundle) -> d
    void onPostMessage(java.lang.String,android.os.Bundle) -> e
    void onRelationshipValidationResult(int,android.net.Uri,boolean,android.os.Bundle) -> f
androidx.browser.customtabs.CustomTabsClient -> b.a.b.c:
    android.content.ComponentName mServiceComponentName -> b
    android.content.Context mApplicationContext -> c
    android.support.customtabs.ICustomTabsService mService -> a
    boolean bindCustomTabsService(android.content.Context,java.lang.String,androidx.browser.customtabs.CustomTabsServiceConnection) -> a
    boolean bindCustomTabsServicePreservePriority(android.content.Context,java.lang.String,androidx.browser.customtabs.CustomTabsServiceConnection) -> b
    android.support.customtabs.ICustomTabsCallback$Stub createCallbackWrapper(androidx.browser.customtabs.CustomTabsCallback) -> c
    android.app.PendingIntent createSessionId(android.content.Context,int) -> d
    androidx.browser.customtabs.CustomTabsSession newSession(androidx.browser.customtabs.CustomTabsCallback) -> e
    androidx.browser.customtabs.CustomTabsSession newSession(androidx.browser.customtabs.CustomTabsCallback,int) -> f
    androidx.browser.customtabs.CustomTabsSession newSessionInternal(androidx.browser.customtabs.CustomTabsCallback,android.app.PendingIntent) -> g
    boolean warmup(long) -> h
androidx.browser.customtabs.CustomTabsClient$2 -> b.a.b.c$a:
    androidx.browser.customtabs.CustomTabsCallback val$callback -> b
    android.os.Handler mHandler -> a
    void onRelationshipValidationResult(int,android.net.Uri,boolean,android.os.Bundle) -> C
    void onPostMessage(java.lang.String,android.os.Bundle) -> d
    void extraCallback(java.lang.String,android.os.Bundle) -> k
    void onMessageChannelReady(android.os.Bundle) -> p
    android.os.Bundle extraCallbackWithResult(java.lang.String,android.os.Bundle) -> x
    void onNavigationEvent(int,android.os.Bundle) -> y
androidx.browser.customtabs.CustomTabsClient$2$1 -> b.a.b.c$a$a:
    android.os.Bundle val$extras -> b
    androidx.browser.customtabs.CustomTabsClient$2 this$1 -> c
    int val$navigationEvent -> a
androidx.browser.customtabs.CustomTabsClient$2$2 -> b.a.b.c$a$b:
    android.os.Bundle val$args -> b
    androidx.browser.customtabs.CustomTabsClient$2 this$1 -> c
    java.lang.String val$callbackName -> a
androidx.browser.customtabs.CustomTabsClient$2$3 -> b.a.b.c$a$c:
    android.os.Bundle val$extras -> a
    androidx.browser.customtabs.CustomTabsClient$2 this$1 -> b
androidx.browser.customtabs.CustomTabsClient$2$4 -> b.a.b.c$a$d:
    android.os.Bundle val$extras -> b
    androidx.browser.customtabs.CustomTabsClient$2 this$1 -> c
    java.lang.String val$message -> a
androidx.browser.customtabs.CustomTabsClient$2$5 -> b.a.b.c$a$e:
    android.os.Bundle val$extras -> d
    androidx.browser.customtabs.CustomTabsClient$2 this$1 -> e
    android.net.Uri val$requestedOrigin -> b
    boolean val$result -> c
    int val$relation -> a
androidx.browser.customtabs.CustomTabsIntent -> b.a.b.d:
    android.content.Intent intent -> a
    android.os.Bundle startAnimationBundle -> b
    androidx.browser.customtabs.CustomTabColorSchemeParams getColorSchemeParams(android.content.Intent,int) -> a
    void launchUrl(android.content.Context,android.net.Uri) -> b
androidx.browser.customtabs.CustomTabsIntent$Builder -> b.a.b.d$a:
    androidx.browser.customtabs.CustomTabColorSchemeParams$Builder mDefaultColorSchemeBuilder -> b
    boolean mInstantAppsEnabled -> i
    android.content.Intent mIntent -> a
    int mShareState -> h
    android.os.Bundle mStartAnimationBundle -> d
    android.os.Bundle mDefaultColorSchemeBundle -> g
    java.util.ArrayList mActionButtons -> e
    android.util.SparseArray mColorSchemeParamBundles -> f
    java.util.ArrayList mMenuItems -> c
    androidx.browser.customtabs.CustomTabsIntent build() -> a
    androidx.browser.customtabs.CustomTabsIntent$Builder setColorScheme(int) -> b
    androidx.browser.customtabs.CustomTabsIntent$Builder setColorSchemeParams(int,androidx.browser.customtabs.CustomTabColorSchemeParams) -> c
    androidx.browser.customtabs.CustomTabsIntent$Builder setNavigationBarColor(int) -> d
    androidx.browser.customtabs.CustomTabsIntent$Builder setNavigationBarDividerColor(int) -> e
    androidx.browser.customtabs.CustomTabsIntent$Builder setSession(androidx.browser.customtabs.CustomTabsSession) -> f
    void setSessionParameters(android.os.IBinder,android.app.PendingIntent) -> g
    androidx.browser.customtabs.CustomTabsIntent$Builder setToolbarColor(int) -> h
androidx.browser.customtabs.CustomTabsServiceConnection -> b.a.b.e:
    android.content.Context mApplicationContext -> a
    void onCustomTabsServiceConnected(android.content.ComponentName,androidx.browser.customtabs.CustomTabsClient) -> a
    void setApplicationContext(android.content.Context) -> b
androidx.browser.customtabs.CustomTabsServiceConnection$1 -> b.a.b.e$a:
androidx.browser.customtabs.CustomTabsSession -> b.a.b.f:
    android.support.customtabs.ICustomTabsCallback mCallback -> b
    android.content.ComponentName mComponentName -> c
    android.support.customtabs.ICustomTabsService mService -> a
    android.app.PendingIntent mId -> d
    void addIdToBundle(android.os.Bundle) -> a
    android.os.Bundle createBundleWithId(android.os.Bundle) -> b
    android.os.IBinder getBinder() -> c
    android.content.ComponentName getComponentName() -> d
    android.app.PendingIntent getId() -> e
    boolean receiveFile(android.net.Uri,int,android.os.Bundle) -> f
    boolean validateRelationship(int,android.net.Uri,android.os.Bundle) -> g
androidx.browser.customtabs.TrustedWebUtils -> b.a.b.g:
    boolean areSplashScreensSupported(android.content.Context,java.lang.String,java.lang.String) -> a
    boolean transferSplashImage(android.content.Context,java.io.File,java.lang.String,java.lang.String,androidx.browser.customtabs.CustomTabsSession) -> b
androidx.browser.trusted.-$$Lambda$TokenContents$EhAh0EiAbuzFn6siY46Fy8sz2WQ -> b.a.c.a:
    androidx.browser.trusted.-$$Lambda$TokenContents$EhAh0EiAbuzFn6siY46Fy8sz2WQ INSTANCE -> a
androidx.browser.trusted.NotificationApiHelperForM -> b.a.c.b:
    android.os.Parcelable[] getActiveNotifications(android.app.NotificationManager) -> a
androidx.browser.trusted.NotificationApiHelperForO -> b.a.c.c:
    android.app.Notification copyNotificationOntoChannel(android.content.Context,android.app.NotificationManager,android.app.Notification,java.lang.String,java.lang.String) -> a
    boolean isChannelEnabled(android.app.NotificationManager,java.lang.String) -> b
androidx.browser.trusted.PackageIdentityUtils -> b.a.c.d:
    byte[] getCertificateSHA256Fingerprint(android.content.pm.Signature) -> a
    java.util.List getFingerprintsForPackage(java.lang.String,android.content.pm.PackageManager) -> b
    androidx.browser.trusted.PackageIdentityUtils$SignaturesCompat getImpl() -> c
    boolean packageMatchesToken(java.lang.String,android.content.pm.PackageManager,androidx.browser.trusted.TokenContents) -> d
androidx.browser.trusted.PackageIdentityUtils$Api28Implementation -> b.a.c.d$a:
    java.util.List getFingerprintsForPackage(java.lang.String,android.content.pm.PackageManager) -> a
    boolean packageMatchesToken(java.lang.String,android.content.pm.PackageManager,androidx.browser.trusted.TokenContents) -> b
androidx.browser.trusted.PackageIdentityUtils$Pre28Implementation -> b.a.c.d$b:
    java.util.List getFingerprintsForPackage(java.lang.String,android.content.pm.PackageManager) -> a
    boolean packageMatchesToken(java.lang.String,android.content.pm.PackageManager,androidx.browser.trusted.TokenContents) -> b
androidx.browser.trusted.PackageIdentityUtils$SignaturesCompat -> b.a.c.d$c:
    java.util.List getFingerprintsForPackage(java.lang.String,android.content.pm.PackageManager) -> a
    boolean packageMatchesToken(java.lang.String,android.content.pm.PackageManager,androidx.browser.trusted.TokenContents) -> b
androidx.browser.trusted.Token -> b.a.c.e:
    androidx.browser.trusted.TokenContents mContents -> a
    androidx.browser.trusted.Token create(java.lang.String,android.content.pm.PackageManager) -> a
    androidx.browser.trusted.Token deserialize(byte[]) -> b
    boolean matches(java.lang.String,android.content.pm.PackageManager) -> c
    byte[] serialize() -> d
androidx.browser.trusted.TokenContents -> b.a.c.f:
    byte[] mContents -> a
    java.util.List mFingerprints -> c
    java.lang.String mPackageName -> b
    int compareByteArrays(byte[],byte[]) -> a
    androidx.browser.trusted.TokenContents create(java.lang.String,java.util.List) -> b
    byte[] createToken(java.lang.String,java.util.List) -> c
    androidx.browser.trusted.TokenContents deserialize(byte[]) -> d
    byte[] getFingerprint(int) -> e
    java.lang.String getPackageName() -> f
    int lambda$EhAh0EiAbuzFn6siY46Fy8sz2WQ(byte[],byte[]) -> g
    void parseIfNeeded() -> h
    byte[] serialize() -> i
androidx.browser.trusted.TokenStore -> b.a.c.g:
    void store(androidx.browser.trusted.Token) -> a
    androidx.browser.trusted.Token load() -> b
androidx.browser.trusted.TrustedWebActivityCallbackRemote -> b.a.c.h:
    android.support.customtabs.trusted.ITrustedWebActivityCallback mCallbackBinder -> a
    androidx.browser.trusted.TrustedWebActivityCallbackRemote fromBinder(android.os.IBinder) -> a
    void runExtraCallback(java.lang.String,android.os.Bundle) -> b
androidx.browser.trusted.TrustedWebActivityDisplayMode -> b.a.c.i:
    android.os.Bundle toBundle() -> a
androidx.browser.trusted.TrustedWebActivityDisplayMode$DefaultMode -> b.a.c.i$a:
    android.os.Bundle toBundle() -> a
androidx.browser.trusted.TrustedWebActivityDisplayMode$ImmersiveMode -> b.a.c.i$b:
    boolean mIsSticky -> a
    int mLayoutInDisplayCutoutMode -> b
    android.os.Bundle toBundle() -> a
androidx.browser.trusted.TrustedWebActivityIntent -> b.a.c.j:
    java.util.List mSharedFileUris -> b
    android.content.Intent mIntent -> a
    android.content.Intent getIntent() -> a
    void grantUriPermissionToProvider(android.content.Context) -> b
    void launchTrustedWebActivity(android.content.Context) -> c
androidx.browser.trusted.TrustedWebActivityIntentBuilder -> b.a.c.k:
    androidx.browser.trusted.sharing.ShareTarget mShareTarget -> f
    int mScreenOrientation -> h
    java.util.List mAdditionalTrustedOrigins -> c
    android.os.Bundle mSplashScreenParams -> d
    androidx.browser.trusted.sharing.ShareData mShareData -> e
    androidx.browser.trusted.TrustedWebActivityDisplayMode mDisplayMode -> g
    androidx.browser.customtabs.CustomTabsIntent$Builder mIntentBuilder -> b
    android.net.Uri mUri -> a
    androidx.browser.trusted.TrustedWebActivityIntent build(androidx.browser.customtabs.CustomTabsSession) -> a
    androidx.browser.customtabs.CustomTabsIntent buildCustomTabsIntent() -> b
    android.net.Uri getUri() -> c
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setAdditionalTrustedOrigins(java.util.List) -> d
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setColorScheme(int) -> e
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setColorSchemeParams(int,androidx.browser.customtabs.CustomTabColorSchemeParams) -> f
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setDisplayMode(androidx.browser.trusted.TrustedWebActivityDisplayMode) -> g
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setNavigationBarColor(int) -> h
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setNavigationBarDividerColor(int) -> i
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setScreenOrientation(int) -> j
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setShareParams(androidx.browser.trusted.sharing.ShareTarget,androidx.browser.trusted.sharing.ShareData) -> k
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setSplashScreenParams(android.os.Bundle) -> l
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setToolbarColor(int) -> m
androidx.browser.trusted.TrustedWebActivityService -> b.a.c.l:
    android.app.NotificationManager mNotificationManager -> a
    int mVerifiedUid -> b
    android.support.customtabs.trusted.ITrustedWebActivityService$Stub mBinder -> c
    java.lang.String channelNameToId(java.lang.String) -> a
    void ensureOnCreateCalled() -> b
    androidx.browser.trusted.TokenStore getTokenStore() -> c
    boolean onAreNotificationsEnabled(java.lang.String) -> d
    void onCancelNotification(java.lang.String,int) -> e
    android.os.Bundle onExtraCommand(java.lang.String,android.os.Bundle,androidx.browser.trusted.TrustedWebActivityCallbackRemote) -> f
    android.os.Parcelable[] onGetActiveNotifications() -> g
    android.os.Bundle onGetSmallIconBitmap() -> h
    int onGetSmallIconId() -> i
    boolean onNotifyNotificationWithChannel(java.lang.String,int,android.app.Notification,java.lang.String) -> j
androidx.browser.trusted.TrustedWebActivityService$1 -> b.a.c.l$a:
    androidx.browser.trusted.TrustedWebActivityService this$0 -> a
    android.os.Bundle getSmallIconBitmap() -> B
    void checkCaller() -> G
    android.os.Bundle areNotificationsEnabled(android.os.Bundle) -> a
    android.os.Bundle getActiveNotifications() -> i
    int getSmallIconId() -> q
    void cancelNotification(android.os.Bundle) -> r
    android.os.Bundle extraCommand(java.lang.String,android.os.Bundle,android.os.IBinder) -> s
    android.os.Bundle notifyNotificationWithChannel(android.os.Bundle) -> z
androidx.browser.trusted.TrustedWebActivityServiceConnection -> b.a.c.m:
    void ensureBundleContains(android.os.Bundle,java.lang.String) -> a
androidx.browser.trusted.TrustedWebActivityServiceConnection$ActiveNotificationsArgs -> b.a.c.m$a:
    android.os.Parcelable[] notifications -> a
    android.os.Bundle toBundle() -> a
androidx.browser.trusted.TrustedWebActivityServiceConnection$CancelNotificationArgs -> b.a.c.m$b:
    java.lang.String platformTag -> a
    int platformId -> b
    androidx.browser.trusted.TrustedWebActivityServiceConnection$CancelNotificationArgs fromBundle(android.os.Bundle) -> a
androidx.browser.trusted.TrustedWebActivityServiceConnection$NotificationsEnabledArgs -> b.a.c.m$c:
    java.lang.String channelName -> a
    androidx.browser.trusted.TrustedWebActivityServiceConnection$NotificationsEnabledArgs fromBundle(android.os.Bundle) -> a
androidx.browser.trusted.TrustedWebActivityServiceConnection$NotifyNotificationArgs -> b.a.c.m$d:
    java.lang.String platformTag -> a
    android.app.Notification notification -> c
    int platformId -> b
    java.lang.String channelName -> d
    androidx.browser.trusted.TrustedWebActivityServiceConnection$NotifyNotificationArgs fromBundle(android.os.Bundle) -> a
androidx.browser.trusted.TrustedWebActivityServiceConnection$ResultArgs -> b.a.c.m$e:
    boolean success -> a
    android.os.Bundle toBundle() -> a
androidx.browser.trusted.sharing.ShareData -> b.a.c.n.a:
    java.util.List uris -> c
    java.lang.String title -> a
    java.lang.String text -> b
    android.os.Bundle toBundle() -> a
androidx.browser.trusted.sharing.ShareTarget -> b.a.c.n.b:
    androidx.browser.trusted.sharing.ShareTarget$Params params -> d
    java.lang.String action -> a
    java.lang.String encodingType -> c
    java.lang.String method -> b
    android.os.Bundle toBundle() -> a
androidx.browser.trusted.sharing.ShareTarget$FileFormField -> b.a.c.n.b$a:
    java.util.List acceptedTypes -> b
    java.lang.String name -> a
    android.os.Bundle toBundle() -> a
androidx.browser.trusted.sharing.ShareTarget$Params -> b.a.c.n.b$b:
    java.util.List files -> c
    java.lang.String title -> a
    java.lang.String text -> b
    android.os.Bundle toBundle() -> a
androidx.collection.ArrayMap -> b.b.a:
    androidx.collection.MapCollections mCollections -> h
    androidx.collection.MapCollections getCollection() -> m
androidx.collection.ArrayMap$1 -> b.b.a$a:
    androidx.collection.ArrayMap this$0 -> d
    void colClear() -> a
    java.lang.Object colGetEntry(int,int) -> b
    java.util.Map colGetMap() -> c
    int colGetSize() -> d
    int colIndexOfKey(java.lang.Object) -> e
    int colIndexOfValue(java.lang.Object) -> f
    void colPut(java.lang.Object,java.lang.Object) -> g
    void colRemoveAt(int) -> h
    java.lang.Object colSetValue(int,java.lang.Object) -> i
androidx.collection.ContainerHelpers -> b.b.b:
    java.lang.Object[] EMPTY_OBJECTS -> b
    int[] EMPTY_INTS -> a
    int binarySearch(int[],int,int) -> a
    boolean equal(java.lang.Object,java.lang.Object) -> b
androidx.collection.MapCollections -> b.b.c:
    androidx.collection.MapCollections$KeySet mKeySet -> b
    androidx.collection.MapCollections$ValuesCollection mValues -> c
    androidx.collection.MapCollections$EntrySet mEntrySet -> a
    void colClear() -> a
    java.lang.Object colGetEntry(int,int) -> b
    java.util.Map colGetMap() -> c
    int colGetSize() -> d
    int colIndexOfKey(java.lang.Object) -> e
    int colIndexOfValue(java.lang.Object) -> f
    void colPut(java.lang.Object,java.lang.Object) -> g
    void colRemoveAt(int) -> h
    java.lang.Object colSetValue(int,java.lang.Object) -> i
    boolean containsAllHelper(java.util.Map,java.util.Collection) -> j
    boolean equalsSetHelper(java.util.Set,java.lang.Object) -> k
    java.util.Set getEntrySet() -> l
    java.util.Set getKeySet() -> m
    java.util.Collection getValues() -> n
    boolean removeAllHelper(java.util.Map,java.util.Collection) -> o
    boolean retainAllHelper(java.util.Map,java.util.Collection) -> p
    java.lang.Object[] toArrayHelper(int) -> q
    java.lang.Object[] toArrayHelper(java.lang.Object[],int) -> r
androidx.collection.MapCollections$ArrayIterator -> b.b.c$a:
    androidx.collection.MapCollections this$0 -> e
    int mSize -> b
    int mIndex -> c
    int mOffset -> a
    boolean mCanRemove -> d
androidx.collection.MapCollections$EntrySet -> b.b.c$b:
    androidx.collection.MapCollections this$0 -> a
    boolean add(java.util.Map$Entry) -> a
androidx.collection.MapCollections$KeySet -> b.b.c$c:
    androidx.collection.MapCollections this$0 -> a
androidx.collection.MapCollections$MapIterator -> b.b.c$d:
    int mIndex -> b
    boolean mEntryValid -> c
    androidx.collection.MapCollections this$0 -> d
    int mEnd -> a
    java.util.Map$Entry next() -> a
androidx.collection.MapCollections$ValuesCollection -> b.b.c$e:
    androidx.collection.MapCollections this$0 -> a
androidx.collection.SimpleArrayMap -> b.b.d:
    java.lang.Object[] mBaseCache -> d
    java.lang.Object[] mArray -> b
    int mTwiceBaseCacheSize -> g
    int mBaseCacheSize -> e
    int[] mHashes -> a
    int mSize -> c
    java.lang.Object[] mTwiceBaseCache -> f
    void allocArrays(int) -> a
    int binarySearchHashes(int[],int,int) -> b
    void ensureCapacity(int) -> c
    void freeArrays(int[],java.lang.Object[],int) -> d
    int indexOf(java.lang.Object,int) -> e
    int indexOfKey(java.lang.Object) -> f
    int indexOfNull() -> g
    int indexOfValue(java.lang.Object) -> h
    java.lang.Object keyAt(int) -> i
    java.lang.Object removeAt(int) -> j
    java.lang.Object setValueAt(int,java.lang.Object) -> k
    java.lang.Object valueAt(int) -> l
androidx.core.app.BundleCompat -> androidx.core.app.a:
    void putBinder(android.os.Bundle,java.lang.String,android.os.IBinder) -> a
androidx.core.app.BundleCompat$BundleCompatBaseImpl -> androidx.core.app.a$a:
    boolean sPutIBinderMethodFetched -> b
    java.lang.reflect.Method sPutIBinderMethod -> a
    void putBinder(android.os.Bundle,java.lang.String,android.os.IBinder) -> a
androidx.core.app.CoreComponentFactory -> androidx.core.app.CoreComponentFactory:
    java.lang.Object checkCompatWrapper(java.lang.Object) -> a
androidx.core.app.CoreComponentFactory$CompatWrapped -> androidx.core.app.CoreComponentFactory$a:
    java.lang.Object getWrapper() -> a
androidx.core.app.NotificationManagerCompat -> androidx.core.app.b:
    android.content.Context mContext -> a
    android.app.NotificationManager mNotificationManager -> b
    boolean areNotificationsEnabled() -> a
    androidx.core.app.NotificationManagerCompat from(android.content.Context) -> b
androidx.core.app.RemoteActionCompat -> androidx.core.app.RemoteActionCompat:
    androidx.core.graphics.drawable.IconCompat mIcon -> a
    java.lang.CharSequence mTitle -> b
    java.lang.CharSequence mContentDescription -> c
    boolean mEnabled -> e
    boolean mShouldShowIcon -> f
    android.app.PendingIntent mActionIntent -> d
androidx.core.content.ContextCompat -> androidx.core.content.a:
    android.util.TypedValue sTempValue -> b
    java.lang.Object sLock -> a
    int getColor(android.content.Context,int) -> a
    android.graphics.drawable.Drawable getDrawable(android.content.Context,int) -> b
    java.io.File[] getExternalCacheDirs(android.content.Context) -> c
    java.io.File[] getExternalFilesDirs(android.content.Context,java.lang.String) -> d
    void startActivity(android.content.Context,android.content.Intent,android.os.Bundle) -> e
androidx.core.content.FileProvider -> androidx.core.content.FileProvider:
    java.io.File DEVICE_ROOT -> c
    androidx.core.content.FileProvider$PathStrategy mStrategy -> a
    java.util.HashMap sCache -> d
    java.lang.String[] COLUMNS -> b
    java.io.File buildPath(java.io.File,java.lang.String[]) -> a
    java.lang.Object[] copyOf(java.lang.Object[],int) -> b
    java.lang.String[] copyOf(java.lang.String[],int) -> c
    androidx.core.content.FileProvider$PathStrategy getPathStrategy(android.content.Context,java.lang.String) -> d
    android.net.Uri getUriForFile(android.content.Context,java.lang.String,java.io.File) -> e
    int modeToMode(java.lang.String) -> f
    androidx.core.content.FileProvider$PathStrategy parsePathStrategy(android.content.Context,java.lang.String) -> g
androidx.core.content.FileProvider$PathStrategy -> androidx.core.content.FileProvider$a:
    java.io.File getFileForUri(android.net.Uri) -> a
    android.net.Uri getUriForFile(java.io.File) -> b
androidx.core.content.FileProvider$SimplePathStrategy -> androidx.core.content.FileProvider$b:
    java.util.HashMap mRoots -> b
    java.lang.String mAuthority -> a
    java.io.File getFileForUri(android.net.Uri) -> a
    android.net.Uri getUriForFile(java.io.File) -> b
    void addRoot(java.lang.String,java.io.File) -> c
androidx.core.graphics.drawable.DrawableCompat -> androidx.core.graphics.drawable.a:
    android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable) -> a
androidx.core.graphics.drawable.IconCompat -> androidx.core.graphics.drawable.IconCompat:
    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE -> j
    java.lang.String mTintModeStr -> i
    android.graphics.PorterDuff$Mode mTintMode -> h
    android.os.Parcelable mParcelable -> d
    java.lang.Object mObj1 -> b
    int mInt2 -> f
    android.content.res.ColorStateList mTintList -> g
    int mInt1 -> e
    byte[] mData -> c
    int mType -> a
    int getResId() -> a
    int getResId(android.graphics.drawable.Icon) -> b
    java.lang.String getResPackage() -> c
    java.lang.String getResPackage(android.graphics.drawable.Icon) -> d
    void onPostParceling() -> e
    void onPreParceling(boolean) -> f
    java.lang.String typeToString(int) -> g
androidx.core.graphics.drawable.TintAwareDrawable -> androidx.core.graphics.drawable.b:
androidx.core.graphics.drawable.WrappedDrawableApi14 -> androidx.core.graphics.drawable.c:
    android.graphics.drawable.Drawable mDrawable -> f
    androidx.core.graphics.drawable.WrappedDrawableState mState -> d
    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE -> g
    android.graphics.PorterDuff$Mode mCurrentMode -> b
    boolean mMutated -> e
    boolean mColorFilterSet -> c
    int mCurrentColor -> a
    boolean isCompatTintEnabled() -> a
    androidx.core.graphics.drawable.WrappedDrawableState mutateConstantState() -> b
    void setWrappedDrawable(android.graphics.drawable.Drawable) -> c
    void updateLocalState(android.content.res.Resources) -> d
    boolean updateTint(int[]) -> e
androidx.core.graphics.drawable.WrappedDrawableApi21 -> androidx.core.graphics.drawable.d:
    java.lang.reflect.Method sIsProjectedDrawableMethod -> h
    boolean isCompatTintEnabled() -> a
    void findAndCacheIsProjectedDrawableMethod() -> f
androidx.core.graphics.drawable.WrappedDrawableState -> androidx.core.graphics.drawable.e:
    android.graphics.drawable.Drawable$ConstantState mDrawableState -> b
    android.content.res.ColorStateList mTint -> c
    android.graphics.PorterDuff$Mode mTintMode -> d
    int mChangingConfigurations -> a
    boolean canConstantState() -> a
androidx.versionedparcelable.ParcelImpl -> androidx.versionedparcelable.ParcelImpl:
    androidx.versionedparcelable.VersionedParcelable mParcel -> a
androidx.versionedparcelable.ParcelImpl$1 -> androidx.versionedparcelable.ParcelImpl$a:
    androidx.versionedparcelable.ParcelImpl createFromParcel(android.os.Parcel) -> a
    androidx.versionedparcelable.ParcelImpl[] newArray(int) -> b
androidx.versionedparcelable.VersionedParcel -> androidx.versionedparcelable.a:
    androidx.collection.ArrayMap mParcelizerCache -> c
    androidx.collection.ArrayMap mReadCache -> a
    androidx.collection.ArrayMap mWriteCache -> b
    void writeByteArray(byte[]) -> A
    void writeByteArray(byte[],int) -> B
    void writeCharSequence(java.lang.CharSequence) -> C
    void writeCharSequence(java.lang.CharSequence,int) -> D
    void writeInt(int) -> E
    void writeInt(int,int) -> F
    void writeParcelable(android.os.Parcelable) -> G
    void writeParcelable(android.os.Parcelable,int) -> H
    void writeString(java.lang.String) -> I
    void writeString(java.lang.String,int) -> J
    void writeToParcel(androidx.versionedparcelable.VersionedParcelable,androidx.versionedparcelable.VersionedParcel) -> K
    void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable) -> L
    void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable,int) -> M
    void writeVersionedParcelableCreator(androidx.versionedparcelable.VersionedParcelable) -> N
    void closeField() -> a
    androidx.versionedparcelable.VersionedParcel createSubParcel() -> b
    java.lang.Class findParcelClass(java.lang.Class) -> c
    java.lang.reflect.Method getReadMethod(java.lang.String) -> d
    java.lang.reflect.Method getWriteMethod(java.lang.Class) -> e
    boolean isStream() -> f
    boolean readBoolean() -> g
    boolean readBoolean(boolean,int) -> h
    byte[] readByteArray() -> i
    byte[] readByteArray(byte[],int) -> j
    java.lang.CharSequence readCharSequence() -> k
    java.lang.CharSequence readCharSequence(java.lang.CharSequence,int) -> l
    boolean readField(int) -> m
    androidx.versionedparcelable.VersionedParcelable readFromParcel(java.lang.String,androidx.versionedparcelable.VersionedParcel) -> n
    int readInt() -> o
    int readInt(int,int) -> p
    android.os.Parcelable readParcelable() -> q
    android.os.Parcelable readParcelable(android.os.Parcelable,int) -> r
    java.lang.String readString() -> s
    java.lang.String readString(java.lang.String,int) -> t
    androidx.versionedparcelable.VersionedParcelable readVersionedParcelable() -> u
    androidx.versionedparcelable.VersionedParcelable readVersionedParcelable(androidx.versionedparcelable.VersionedParcelable,int) -> v
    void setOutputField(int) -> w
    void setSerializationFlags(boolean,boolean) -> x
    void writeBoolean(boolean) -> y
    void writeBoolean(boolean,int) -> z
androidx.versionedparcelable.VersionedParcelParcel -> androidx.versionedparcelable.b:
    android.util.SparseIntArray mPositionLookup -> d
    java.lang.String mPrefix -> h
    int mNextRead -> j
    android.os.Parcel mParcel -> e
    int mFieldId -> k
    int mCurrentField -> i
    int mOffset -> f
    int mEnd -> g
    void writeByteArray(byte[]) -> A
    void writeCharSequence(java.lang.CharSequence) -> C
    void writeInt(int) -> E
    void writeParcelable(android.os.Parcelable) -> G
    void writeString(java.lang.String) -> I
    void closeField() -> a
    androidx.versionedparcelable.VersionedParcel createSubParcel() -> b
    boolean readBoolean() -> g
    byte[] readByteArray() -> i
    java.lang.CharSequence readCharSequence() -> k
    boolean readField(int) -> m
    int readInt() -> o
    android.os.Parcelable readParcelable() -> q
    java.lang.String readString() -> s
    void setOutputField(int) -> w
    void writeBoolean(boolean) -> y
androidx.versionedparcelable.VersionedParcelable -> androidx.versionedparcelable.c:
com.android.billingclient.api.AcknowledgePurchaseParams -> com.android.billingclient.api.a:
    java.lang.String zza -> a
    java.lang.String getPurchaseToken() -> a
    com.android.billingclient.api.AcknowledgePurchaseParams$Builder newBuilder() -> b
    java.lang.String zza(com.android.billingclient.api.AcknowledgePurchaseParams,java.lang.String) -> c
com.android.billingclient.api.AcknowledgePurchaseParams$Builder -> com.android.billingclient.api.a$a:
    java.lang.String zza -> a
    com.android.billingclient.api.AcknowledgePurchaseParams build() -> a
    com.android.billingclient.api.AcknowledgePurchaseParams$Builder setPurchaseToken(java.lang.String) -> b
com.android.billingclient.api.AcknowledgePurchaseResponseListener -> com.android.billingclient.api.b:
    void onAcknowledgePurchaseResponse(com.android.billingclient.api.BillingResult) -> a
com.android.billingclient.api.BillingClient -> com.android.billingclient.api.c:
    void acknowledgePurchase(com.android.billingclient.api.AcknowledgePurchaseParams,com.android.billingclient.api.AcknowledgePurchaseResponseListener) -> a
    void consumeAsync(com.android.billingclient.api.ConsumeParams,com.android.billingclient.api.ConsumeResponseListener) -> b
    com.android.billingclient.api.BillingResult launchBillingFlow(android.app.Activity,com.android.billingclient.api.BillingFlowParams) -> c
    com.android.billingclient.api.BillingClient$Builder newBuilder(android.content.Context) -> d
    com.android.billingclient.api.Purchase$PurchasesResult queryPurchases(java.lang.String) -> e
    void querySkuDetailsAsync(com.android.billingclient.api.SkuDetailsParams,com.android.billingclient.api.SkuDetailsResponseListener) -> f
    void startConnection(com.android.billingclient.api.BillingClientStateListener) -> g
com.android.billingclient.api.BillingClient$Builder -> com.android.billingclient.api.c$a:
    android.content.Context zzb -> b
    com.android.billingclient.api.PurchasesUpdatedListener zzc -> c
    boolean zza -> a
    com.android.billingclient.api.BillingClient build() -> a
    com.android.billingclient.api.BillingClient$Builder enablePendingPurchases() -> b
    com.android.billingclient.api.BillingClient$Builder setListener(com.android.billingclient.api.PurchasesUpdatedListener) -> c
com.android.billingclient.api.BillingClientImpl -> com.android.billingclient.api.d:
    boolean zzm -> m
    boolean zzn -> n
    boolean zzo -> o
    java.util.concurrent.ExecutorService zzt -> t
    boolean zzp -> p
    boolean zzi -> i
    boolean zzj -> j
    int zzk -> k
    boolean zzl -> l
    android.content.Context zze -> e
    com.android.billingclient.api.BillingClientImpl$zza zzh -> h
    boolean zzq -> q
    boolean zzr -> r
    boolean zzs -> s
    java.lang.String zzu -> u
    int zza -> a
    android.content.Context zzf -> f
    com.google.android.gms.internal.play_billing.zzc zzg -> g
    android.os.Handler zzc -> c
    com.android.billingclient.api.zzd zzd -> d
    java.lang.String zzb -> b
    boolean zzb(com.android.billingclient.api.BillingClientImpl,boolean) -> A
    java.lang.String zzc(com.android.billingclient.api.BillingClientImpl) -> B
    boolean zzc(com.android.billingclient.api.BillingClientImpl,boolean) -> C
    int zzd(com.android.billingclient.api.BillingClientImpl) -> D
    com.android.billingclient.api.BillingResult zzd() -> E
    com.android.billingclient.api.Purchase$PurchasesResult zzd(java.lang.String) -> F
    boolean zzd(com.android.billingclient.api.BillingClientImpl,boolean) -> G
    com.android.billingclient.api.BillingResult zze(com.android.billingclient.api.BillingClientImpl) -> H
    boolean zze(com.android.billingclient.api.BillingClientImpl,boolean) -> I
    boolean zzf(com.android.billingclient.api.BillingClientImpl,boolean) -> J
    boolean zzg(com.android.billingclient.api.BillingClientImpl,boolean) -> K
    boolean zzh(com.android.billingclient.api.BillingClientImpl,boolean) -> L
    boolean zzi(com.android.billingclient.api.BillingClientImpl,boolean) -> M
    void acknowledgePurchase(com.android.billingclient.api.AcknowledgePurchaseParams,com.android.billingclient.api.AcknowledgePurchaseResponseListener) -> a
    void consumeAsync(com.android.billingclient.api.ConsumeParams,com.android.billingclient.api.ConsumeResponseListener) -> b
    com.android.billingclient.api.BillingResult launchBillingFlow(android.app.Activity,com.android.billingclient.api.BillingFlowParams) -> c
    com.android.billingclient.api.Purchase$PurchasesResult queryPurchases(java.lang.String) -> e
    void querySkuDetailsAsync(com.android.billingclient.api.SkuDetailsParams,com.android.billingclient.api.SkuDetailsResponseListener) -> f
    void startConnection(com.android.billingclient.api.BillingClientStateListener) -> g
    void initialize(android.content.Context,com.android.billingclient.api.PurchasesUpdatedListener,boolean) -> h
    boolean isReady() -> i
    int zza(com.android.billingclient.api.BillingClientImpl,int) -> j
    android.content.Context zza(com.android.billingclient.api.BillingClientImpl) -> k
    com.android.billingclient.api.BillingResult zza(com.android.billingclient.api.BillingResult) -> l
    com.android.billingclient.api.Purchase$PurchasesResult zza(com.android.billingclient.api.BillingClientImpl,java.lang.String) -> m
    com.android.billingclient.api.SkuDetails$zza zza(java.lang.String,java.util.List,java.lang.String) -> n
    com.google.android.gms.internal.play_billing.zzc zza(com.android.billingclient.api.BillingClientImpl,com.google.android.gms.internal.play_billing.zzc) -> o
    java.lang.String zza(java.lang.String) -> p
    java.util.concurrent.Future zza(com.android.billingclient.api.BillingClientImpl,java.util.concurrent.Callable,long,java.lang.Runnable) -> q
    java.util.concurrent.Future zza(java.util.concurrent.Callable,long,java.lang.Runnable) -> r
    void zza(com.android.billingclient.api.BillingClientImpl,com.android.billingclient.api.ConsumeParams,com.android.billingclient.api.ConsumeResponseListener) -> s
    void zza(com.android.billingclient.api.BillingClientImpl,java.lang.Runnable) -> t
    void zza(com.android.billingclient.api.ConsumeParams,com.android.billingclient.api.ConsumeResponseListener) -> u
    void zza(java.lang.Runnable) -> v
    boolean zza(com.android.billingclient.api.BillingClientImpl,boolean) -> w
    int zzb(com.android.billingclient.api.BillingClientImpl,int) -> x
    com.google.android.gms.internal.play_billing.zzc zzb(com.android.billingclient.api.BillingClientImpl) -> y
    java.lang.String zzb() -> z
com.android.billingclient.api.BillingClientImpl$zza -> com.android.billingclient.api.d$a:
    com.android.billingclient.api.BillingClientStateListener zzd -> c
    com.android.billingclient.api.BillingClientImpl zza -> d
    java.lang.Object zzb -> a
    boolean zzc -> b
    java.lang.Object zza(com.android.billingclient.api.BillingClientImpl$zza) -> a
    void zza(com.android.billingclient.api.BillingClientImpl$zza,com.android.billingclient.api.BillingResult) -> b
    void zza(com.android.billingclient.api.BillingResult) -> c
    com.android.billingclient.api.BillingClientStateListener zzb(com.android.billingclient.api.BillingClientImpl$zza) -> d
    boolean zzc(com.android.billingclient.api.BillingClientImpl$zza) -> e
com.android.billingclient.api.BillingClientStateListener -> com.android.billingclient.api.e:
    void onBillingSetupFinished(com.android.billingclient.api.BillingResult) -> a
    void onBillingServiceDisconnected() -> b
com.android.billingclient.api.BillingFlowParams -> com.android.billingclient.api.f:
    java.lang.String zzf -> f
    boolean zzi -> i
    java.util.ArrayList zzh -> h
    int zzg -> g
    boolean zza -> a
    java.lang.String zzc -> c
    java.lang.String zzb -> b
    java.lang.String zze -> e
    java.lang.String zzd -> d
    java.lang.String getOldSku() -> a
    java.lang.String getOldSkuPurchaseToken() -> b
    int getReplaceSkusProrationMode() -> c
    boolean getVrPurchaseFlow() -> d
    com.android.billingclient.api.BillingFlowParams$Builder newBuilder() -> e
    int zza(com.android.billingclient.api.BillingFlowParams,int) -> f
    java.lang.String zza(com.android.billingclient.api.BillingFlowParams,java.lang.String) -> g
    java.util.ArrayList zza() -> h
    java.util.ArrayList zza(com.android.billingclient.api.BillingFlowParams,java.util.ArrayList) -> i
    boolean zza(com.android.billingclient.api.BillingFlowParams,boolean) -> j
    java.lang.String zzb() -> k
    java.lang.String zzb(com.android.billingclient.api.BillingFlowParams,java.lang.String) -> l
    boolean zzb(com.android.billingclient.api.BillingFlowParams,boolean) -> m
    java.lang.String zzc(com.android.billingclient.api.BillingFlowParams,java.lang.String) -> n
    boolean zzc() -> o
    java.lang.String zzd() -> p
    java.lang.String zzd(com.android.billingclient.api.BillingFlowParams,java.lang.String) -> q
    java.lang.String zze(com.android.billingclient.api.BillingFlowParams,java.lang.String) -> r
com.android.billingclient.api.BillingFlowParams$Builder -> com.android.billingclient.api.f$a:
    java.util.ArrayList zzf -> f
    java.lang.String zza -> a
    boolean zzg -> g
    int zze -> e
    java.lang.String zzc -> c
    java.lang.String zzb -> b
    java.lang.String zzd -> d
    com.android.billingclient.api.BillingFlowParams build() -> a
    com.android.billingclient.api.BillingFlowParams$Builder setSkuDetails(com.android.billingclient.api.SkuDetails) -> b
com.android.billingclient.api.BillingResult -> com.android.billingclient.api.g:
    java.lang.String zzb -> b
    int zza -> a
    java.lang.String getDebugMessage() -> a
    int getResponseCode() -> b
    com.android.billingclient.api.BillingResult$Builder newBuilder() -> c
    int zza(com.android.billingclient.api.BillingResult,int) -> d
    java.lang.String zza(com.android.billingclient.api.BillingResult,java.lang.String) -> e
com.android.billingclient.api.BillingResult$Builder -> com.android.billingclient.api.g$a:
    java.lang.String zzb -> b
    int zza -> a
    com.android.billingclient.api.BillingResult build() -> a
    com.android.billingclient.api.BillingResult$Builder setDebugMessage(java.lang.String) -> b
    com.android.billingclient.api.BillingResult$Builder setResponseCode(int) -> c
com.android.billingclient.api.ConsumeParams -> com.android.billingclient.api.h:
    java.lang.String zza -> a
    java.lang.String getPurchaseToken() -> a
    com.android.billingclient.api.ConsumeParams$Builder newBuilder() -> b
    java.lang.String zza(com.android.billingclient.api.ConsumeParams,java.lang.String) -> c
com.android.billingclient.api.ConsumeParams$Builder -> com.android.billingclient.api.h$a:
    java.lang.String zza -> a
    com.android.billingclient.api.ConsumeParams build() -> a
    com.android.billingclient.api.ConsumeParams$Builder setPurchaseToken(java.lang.String) -> b
com.android.billingclient.api.ConsumeResponseListener -> com.android.billingclient.api.i:
    void onConsumeResponse(com.android.billingclient.api.BillingResult,java.lang.String) -> a
com.android.billingclient.api.ProxyBillingActivity -> com.android.billingclient.api.ProxyBillingActivity:
    android.os.ResultReceiver zza -> a
    android.content.Intent zza() -> a
com.android.billingclient.api.Purchase -> com.android.billingclient.api.j:
    org.json.JSONObject zzc -> c
    java.lang.String zza -> a
    java.lang.String zzb -> b
    java.lang.String getOriginalJson() -> a
    int getPurchaseState() -> b
    long getPurchaseTime() -> c
    java.lang.String getPurchaseToken() -> d
    java.lang.String getSignature() -> e
    java.lang.String getSku() -> f
    boolean isAcknowledged() -> g
    boolean isAutoRenewing() -> h
com.android.billingclient.api.Purchase$PurchasesResult -> com.android.billingclient.api.j$a:
    java.util.List zza -> a
    com.android.billingclient.api.BillingResult zzb -> b
    com.android.billingclient.api.BillingResult getBillingResult() -> a
    java.util.List getPurchasesList() -> b
com.android.billingclient.api.PurchasesUpdatedListener -> com.android.billingclient.api.k:
    void onPurchasesUpdated(com.android.billingclient.api.BillingResult,java.util.List) -> a
com.android.billingclient.api.SkuDetails -> com.android.billingclient.api.l:
    org.json.JSONObject zzb -> b
    java.lang.String zza -> a
    java.lang.String getDescription() -> a
    java.lang.String getFreeTrialPeriod() -> b
    long getIntroductoryPriceAmountMicros() -> c
    java.lang.String getIntroductoryPricePeriod() -> d
    java.lang.String getOriginalJson() -> e
    long getPriceAmountMicros() -> f
    java.lang.String getPriceCurrencyCode() -> g
    java.lang.String getSku() -> h
    java.lang.String getSubscriptionPeriod() -> i
    java.lang.String getTitle() -> j
    java.lang.String getType() -> k
    java.lang.String zza() -> l
    java.lang.String zzb() -> m
com.android.billingclient.api.SkuDetails$zza -> com.android.billingclient.api.l$a:
    java.util.List zza -> a
    int zzb -> b
    java.lang.String zzc -> c
    java.util.List zza() -> a
    int zzb() -> b
    java.lang.String zzc() -> c
com.android.billingclient.api.SkuDetailsParams -> com.android.billingclient.api.m:
    java.util.List zzd -> d
    java.util.List zzc -> c
    java.lang.String zza -> a
    java.lang.String zzb -> b
    java.lang.String getSkuType() -> a
    java.util.List getSkusList() -> b
    com.android.billingclient.api.SkuDetailsParams$Builder newBuilder() -> c
    java.lang.String zza(com.android.billingclient.api.SkuDetailsParams,java.lang.String) -> d
    java.util.List zza(com.android.billingclient.api.SkuDetailsParams,java.util.List) -> e
    java.lang.String zzb(com.android.billingclient.api.SkuDetailsParams,java.lang.String) -> f
    java.util.List zzb(com.android.billingclient.api.SkuDetailsParams,java.util.List) -> g
com.android.billingclient.api.SkuDetailsParams$Builder -> com.android.billingclient.api.m$a:
    java.util.List zzb -> b
    java.lang.String zza -> a
    com.android.billingclient.api.SkuDetailsParams build() -> a
    com.android.billingclient.api.SkuDetailsParams$Builder setSkusList(java.util.List) -> b
    com.android.billingclient.api.SkuDetailsParams$Builder setType(java.lang.String) -> c
com.android.billingclient.api.SkuDetailsResponseListener -> com.android.billingclient.api.n:
    void onSkuDetailsResponse(com.android.billingclient.api.BillingResult,java.util.List) -> a
com.android.billingclient.api.zza -> com.android.billingclient.api.o:
com.android.billingclient.api.zzaa -> com.android.billingclient.api.p:
    java.lang.String zza -> a
    com.android.billingclient.api.BillingClientImpl zzb -> b
com.android.billingclient.api.zzab -> com.android.billingclient.api.q:
    com.android.billingclient.api.BillingClientImpl zzc -> c
    com.android.billingclient.api.SkuDetails zza -> a
    java.lang.String zzb -> b
com.android.billingclient.api.zzac -> com.android.billingclient.api.r:
    com.android.billingclient.api.SkuDetails$zza zza -> a
    com.android.billingclient.api.zzad zzb -> b
com.android.billingclient.api.zzad -> com.android.billingclient.api.s:
    java.util.List zzc -> b
    com.android.billingclient.api.SkuDetailsResponseListener zza -> d
    java.lang.String zzb -> a
    com.android.billingclient.api.BillingClientImpl zze -> e
    java.lang.String zzd -> c
com.android.billingclient.api.zzae -> com.android.billingclient.api.t:
    com.android.billingclient.api.BillingClientImpl$zza zzb -> b
    com.android.billingclient.api.BillingResult zza -> a
com.android.billingclient.api.zzaf -> com.android.billingclient.api.u:
    com.android.billingclient.api.BillingClientImpl$zza zza -> a
com.android.billingclient.api.zzag -> com.android.billingclient.api.v:
    com.android.billingclient.api.BillingClientImpl$zza zza -> a
    java.lang.Void zza() -> a
com.android.billingclient.api.zzai -> com.android.billingclient.api.w:
com.android.billingclient.api.zzaj -> com.android.billingclient.api.x:
com.android.billingclient.api.zzak -> com.android.billingclient.api.y:
    com.android.billingclient.api.BillingResult zzl -> k
    com.android.billingclient.api.BillingResult zzn -> l
    com.android.billingclient.api.BillingResult zzi -> i
    com.android.billingclient.api.BillingResult zzk -> j
    com.android.billingclient.api.BillingResult zzq -> o
    com.android.billingclient.api.BillingResult zzr -> p
    com.android.billingclient.api.BillingResult zzo -> m
    com.android.billingclient.api.BillingResult zzp -> n
    com.android.billingclient.api.BillingResult zzc -> c
    com.android.billingclient.api.BillingResult zzd -> d
    com.android.billingclient.api.BillingResult zza -> a
    com.android.billingclient.api.BillingResult zzb -> b
    com.android.billingclient.api.BillingResult zzg -> g
    com.android.billingclient.api.BillingResult zzh -> h
    com.android.billingclient.api.BillingResult zze -> e
    com.android.billingclient.api.BillingResult zzf -> f
    com.android.billingclient.api.BillingResult zzs -> q
com.android.billingclient.api.zzal -> com.android.billingclient.api.z:
com.android.billingclient.api.zzam -> com.android.billingclient.api.a0:
    com.android.billingclient.api.BillingResult zza(android.os.Bundle,java.lang.String,java.lang.String) -> a
com.android.billingclient.api.zzan -> com.android.billingclient.api.b0:
com.android.billingclient.api.zzao -> com.android.billingclient.api.c0:
com.android.billingclient.api.zzap -> com.android.billingclient.api.d0:
    java.lang.String zza -> a
    java.lang.String zzb -> b
    java.lang.String zza() -> a
    java.lang.String zzb() -> b
com.android.billingclient.api.zzap$zza -> com.android.billingclient.api.d0$a:
    java.lang.String zza -> a
    com.android.billingclient.api.zzap$zza zza(java.lang.String) -> a
    com.android.billingclient.api.zzap zza() -> b
com.android.billingclient.api.zzc -> com.android.billingclient.api.e0:
com.android.billingclient.api.zzd -> com.android.billingclient.api.f0:
    android.content.Context zza -> a
    com.android.billingclient.api.zze zzb -> b
    com.android.billingclient.api.zze zza(com.android.billingclient.api.zzd) -> a
    void zza() -> b
    com.android.billingclient.api.PurchasesUpdatedListener zzb() -> c
com.android.billingclient.api.zze -> com.android.billingclient.api.g0:
    com.android.billingclient.api.PurchasesUpdatedListener zza -> a
    com.android.billingclient.api.zzd zzc -> c
    boolean zzb -> b
    com.android.billingclient.api.PurchasesUpdatedListener zza(com.android.billingclient.api.zze) -> a
    void zza(android.content.Context,android.content.IntentFilter) -> b
com.android.billingclient.api.zzf -> com.android.billingclient.api.h0:
com.android.billingclient.api.zzg -> com.android.billingclient.api.i0:
    com.android.billingclient.api.SkuDetailsResponseListener zza -> a
com.android.billingclient.api.zzh -> com.android.billingclient.api.j0:
com.android.billingclient.api.zzi -> com.android.billingclient.api.k0:
    com.android.billingclient.api.ConsumeResponseListener zza -> a
    com.android.billingclient.api.ConsumeParams zzb -> b
com.android.billingclient.api.zzj -> com.android.billingclient.api.l0:
    com.android.billingclient.api.ConsumeResponseListener zzb -> b
    com.android.billingclient.api.BillingClientImpl zzc -> c
    com.android.billingclient.api.ConsumeParams zza -> a
com.android.billingclient.api.zzm -> com.android.billingclient.api.m0:
    com.android.billingclient.api.AcknowledgePurchaseParams zzb -> a
    com.android.billingclient.api.AcknowledgePurchaseResponseListener zza -> b
    com.android.billingclient.api.BillingClientImpl zzc -> c
    java.lang.Void zza() -> a
com.android.billingclient.api.zzo -> com.android.billingclient.api.n0:
    com.android.billingclient.api.zzm zzc -> c
    java.lang.String zzb -> b
    int zza -> a
com.android.billingclient.api.zzp -> com.android.billingclient.api.o0:
    com.android.billingclient.api.zzm zzb -> b
    java.lang.Exception zza -> a
com.android.billingclient.api.zzq -> com.android.billingclient.api.p0:
    java.util.concurrent.atomic.AtomicInteger zzb -> b
    java.util.concurrent.ThreadFactory zza -> a
com.android.billingclient.api.zzr -> com.android.billingclient.api.q0:
    com.android.billingclient.api.AcknowledgePurchaseResponseListener zza -> a
com.android.billingclient.api.zzt -> com.android.billingclient.api.r0:
    java.util.concurrent.Future zza -> a
    java.lang.Runnable zzb -> b
com.android.billingclient.api.zzu -> com.android.billingclient.api.s0:
    com.android.billingclient.api.ConsumeResponseListener zza -> a
    com.android.billingclient.api.BillingResult zzb -> b
    java.lang.String zzc -> c
com.android.billingclient.api.zzw -> com.android.billingclient.api.t0:
    com.android.billingclient.api.ConsumeResponseListener zzb -> b
    java.lang.String zzc -> c
    java.lang.Exception zza -> a
com.android.billingclient.api.zzx -> com.android.billingclient.api.u0:
    com.android.billingclient.api.ConsumeResponseListener zzb -> b
    com.android.billingclient.api.BillingResult zzc -> c
    int zza -> a
    java.lang.String zzd -> d
com.android.billingclient.api.zzy -> com.android.billingclient.api.v0:
    com.android.billingclient.api.BillingClientImpl zzc -> c
    com.android.billingclient.api.BillingFlowParams zza -> a
    com.android.billingclient.api.SkuDetails zzb -> b
com.android.billingclient.api.zzz -> com.android.billingclient.api.w0:
    android.os.Bundle zze -> e
    com.android.billingclient.api.BillingClientImpl zzf -> f
    java.lang.String zzc -> c
    com.android.billingclient.api.SkuDetails zzb -> b
    int zza -> a
    com.android.billingclient.api.BillingFlowParams zzd -> d
com.google.android.gms.internal.play_billing.zza -> c.a.a.a.a.a.a:
    int zza -> a
    int zza(android.content.Intent,java.lang.String) -> a
    int zza(android.os.Bundle,java.lang.String) -> b
    android.os.Bundle zza(int,boolean,java.lang.String,java.lang.String,java.util.ArrayList) -> c
    android.os.Bundle zza(com.android.billingclient.api.AcknowledgePurchaseParams,java.lang.String) -> d
    android.os.Bundle zza(com.android.billingclient.api.BillingFlowParams,boolean,boolean,java.lang.String) -> e
    android.os.Bundle zza(com.android.billingclient.api.ConsumeParams,boolean,java.lang.String) -> f
    android.os.Bundle zza(boolean,boolean,java.lang.String) -> g
    java.util.List zza(android.os.Bundle) -> h
    void zza(java.lang.String,java.lang.String) -> i
    com.android.billingclient.api.BillingResult zzb(android.content.Intent,java.lang.String) -> j
    java.lang.String zzb(android.os.Bundle,java.lang.String) -> k
    void zzb(java.lang.String,java.lang.String) -> l
    com.android.billingclient.api.Purchase zzc(java.lang.String,java.lang.String) -> m
com.google.android.gms.internal.play_billing.zzb -> c.a.a.a.a.a.b:
    com.google.android.gms.internal.play_billing.zzc zza(android.os.IBinder) -> G
com.google.android.gms.internal.play_billing.zzc -> c.a.a.a.a.a.c:
    android.os.Bundle zza(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> D
    android.os.Bundle zza(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Bundle) -> F
    int zzb(int,java.lang.String,java.lang.String) -> e
    android.os.Bundle zzc(int,java.lang.String,java.lang.String,java.lang.String,android.os.Bundle) -> f
    android.os.Bundle zza(int,java.lang.String,java.lang.String,android.os.Bundle) -> g
    android.os.Bundle zza(int,java.lang.String,java.util.List,java.lang.String,java.lang.String,java.lang.String) -> h
    int zza(int,java.lang.String,java.lang.String) -> j
    android.os.Bundle zzd(int,java.lang.String,java.lang.String,android.os.Bundle) -> m
    android.os.Bundle zzc(int,java.lang.String,java.lang.String,android.os.Bundle) -> o
    android.os.Bundle zza(int,java.lang.String,java.lang.String,java.lang.String) -> u
    android.os.Bundle zza(int,java.lang.String,java.lang.String,android.os.Bundle,android.os.Bundle) -> v
com.google.android.gms.internal.play_billing.zzd -> c.a.a.a.a.a.d:
    android.os.IBinder zza -> a
    java.lang.String zzb -> b
    android.os.Parcel zza() -> G
    android.os.Parcel zza(int,android.os.Parcel) -> H
com.google.android.gms.internal.play_billing.zze -> c.a.a.a.a.a.e:
    android.os.Bundle zza(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> D
    android.os.Bundle zza(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Bundle) -> F
    int zzb(int,java.lang.String,java.lang.String) -> e
    android.os.Bundle zzc(int,java.lang.String,java.lang.String,java.lang.String,android.os.Bundle) -> f
    android.os.Bundle zza(int,java.lang.String,java.lang.String,android.os.Bundle) -> g
    android.os.Bundle zza(int,java.lang.String,java.util.List,java.lang.String,java.lang.String,java.lang.String) -> h
    int zza(int,java.lang.String,java.lang.String) -> j
    android.os.Bundle zzd(int,java.lang.String,java.lang.String,android.os.Bundle) -> m
    android.os.Bundle zzc(int,java.lang.String,java.lang.String,android.os.Bundle) -> o
    android.os.Bundle zza(int,java.lang.String,java.lang.String,java.lang.String) -> u
    android.os.Bundle zza(int,java.lang.String,java.lang.String,android.os.Bundle,android.os.Bundle) -> v
com.google.android.gms.internal.play_billing.zzf -> c.a.a.a.a.a.f:
    android.os.Parcelable zza(android.os.Parcel,android.os.Parcelable$Creator) -> a
    void zza(android.os.Parcel,android.os.Parcelable) -> b
com.google.android.gms.internal.play_billing.zzg -> c.a.a.a.a.a.g:
com.google.androidbrowserhelper.R$drawable -> c.a.b.a:
com.google.androidbrowserhelper.R$string -> c.a.b.b:
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$AcknowledgeCall$O7tB44xAKwKRMltYZKkTQGddfHo -> c.a.b.c.a.a:
    com.google.androidbrowserhelper.playbilling.digitalgoods.AcknowledgeCall f$0 -> a
    void onAcknowledgePurchaseResponse(com.android.billingclient.api.BillingResult) -> a
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$AcknowledgeCall$tUh5dPhMqZpx1ckgCjo0HK8n2OE -> c.a.b.c.a.b:
    com.google.androidbrowserhelper.playbilling.digitalgoods.AcknowledgeCall f$0 -> a
    void onConsumeResponse(com.android.billingclient.api.BillingResult,java.lang.String) -> a
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$ConnectedBillingWrapper$4g0NKdUUy3aCS2c8b9K8QZNVcv4 -> c.a.b.c.a.c:
    com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$ConnectedBillingWrapper$4g0NKdUUy3aCS2c8b9K8QZNVcv4 INSTANCE -> a
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$ConnectedBillingWrapper$5hRuUupcyHMRmEMfZW-ml3Gxv_s -> c.a.b.c.a.d:
    com.android.billingclient.api.SkuDetailsResponseListener f$3 -> d
    com.google.androidbrowserhelper.playbilling.digitalgoods.ConnectedBillingWrapper f$0 -> a
    java.util.List f$2 -> c
    java.lang.String f$1 -> b
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$ConnectedBillingWrapper$P4UBkXEIHW1aTJyga3lcJsPprDo -> c.a.b.c.a.e:
    com.google.androidbrowserhelper.playbilling.digitalgoods.ConnectedBillingWrapper f$0 -> a
    com.android.billingclient.api.AcknowledgePurchaseResponseListener f$2 -> c
    java.lang.String f$1 -> b
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$ConnectedBillingWrapper$bDJhvXW-WCwxGUFvUTTaEWRSVwc -> c.a.b.c.a.f:
    com.google.androidbrowserhelper.playbilling.digitalgoods.ConnectedBillingWrapper f$0 -> a
    com.google.androidbrowserhelper.playbilling.provider.BillingWrapper$QueryPurchasesListener f$2 -> c
    java.lang.String f$1 -> b
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$ConnectedBillingWrapper$m8fytuBus3Yc8DxwMnQYsxvtlZg -> c.a.b.c.a.g:
    com.android.billingclient.api.ConsumeResponseListener f$2 -> c
    com.google.androidbrowserhelper.playbilling.digitalgoods.ConnectedBillingWrapper f$0 -> a
    java.lang.String f$1 -> b
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$DigitalGoodsRequestHandler$QoieUFpzk7arTMlp9eS8HWrFh74 -> c.a.b.c.a.h:
    androidx.browser.trusted.TrustedWebActivityCallbackRemote f$0 -> a
    void run(java.lang.String,android.os.Bundle) -> a
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$DigitalGoodsRequestHandler$UGOLcp1-Obsdf3Hn71_MnFq62ac -> c.a.b.c.a.i:
    com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$DigitalGoodsRequestHandler$UGOLcp1-Obsdf3Hn71_MnFq62ac INSTANCE -> a
    void onPurchaseFlowComplete(com.android.billingclient.api.BillingResult,java.lang.String) -> a
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$GetDetailsCall$Xueomq9kG_vHW9pF5bbOTotDp7w -> c.a.b.c.a.j:
    com.google.androidbrowserhelper.playbilling.digitalgoods.GetDetailsCall f$0 -> a
    void onResult(com.android.billingclient.api.BillingResult,java.util.List) -> a
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$ListPurchasesCall$ap7ESYJg79FErAnBAkpXEEOTGiQ -> c.a.b.c.a.k:
    com.google.androidbrowserhelper.playbilling.digitalgoods.BillingResultMerger f$0 -> a
    void onQueryPurchasesResponse(com.android.billingclient.api.Purchase$PurchasesResult) -> a
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$ListPurchasesCall$iXsEPC6b_wlX9_DcwbqI9_PVYaM -> c.a.b.c.a.l:
    com.google.androidbrowserhelper.playbilling.digitalgoods.ListPurchasesCall f$0 -> a
    void onResult(com.android.billingclient.api.BillingResult,java.util.List) -> a
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$ListPurchasesCall$j43UA-qr5hkndbuT1IZWlbqLVgU -> c.a.b.c.a.m:
    com.google.androidbrowserhelper.playbilling.digitalgoods.BillingResultMerger f$0 -> a
    void onQueryPurchasesResponse(com.android.billingclient.api.Purchase$PurchasesResult) -> a
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$eL9jPjNsWQu2Ye-9mQpvMjlui6c -> c.a.b.c.a.n:
    com.google.androidbrowserhelper.playbilling.digitalgoods.BillingResultMerger f$0 -> a
    void onSkuDetailsResponse(com.android.billingclient.api.BillingResult,java.util.List) -> a
com.google.androidbrowserhelper.playbilling.digitalgoods.-$$Lambda$l476L1D0lm9YZtEKrN2xDMd35YA -> c.a.b.c.a.o:
    com.google.androidbrowserhelper.playbilling.digitalgoods.BillingResultMerger f$0 -> a
    void onSkuDetailsResponse(com.android.billingclient.api.BillingResult,java.util.List) -> a
com.google.androidbrowserhelper.playbilling.digitalgoods.AcknowledgeCall -> c.a.b.c.a.p:
    com.google.androidbrowserhelper.playbilling.digitalgoods.DigitalGoodsCallback mCallback -> c
    java.lang.String purchaseToken -> a
    boolean makeAvailableAgain -> b
    void call(com.google.androidbrowserhelper.playbilling.provider.BillingWrapper) -> a
    com.google.androidbrowserhelper.playbilling.digitalgoods.AcknowledgeCall create(android.os.Bundle,com.google.androidbrowserhelper.playbilling.digitalgoods.DigitalGoodsCallback) -> b
    void lambda$O7tB44xAKwKRMltYZKkTQGddfHo(com.google.androidbrowserhelper.playbilling.digitalgoods.AcknowledgeCall,com.android.billingclient.api.BillingResult) -> c
    void lambda$call$0(com.android.billingclient.api.BillingResult,java.lang.String) -> d
    void respond(com.android.billingclient.api.BillingResult) -> e
com.google.androidbrowserhelper.playbilling.digitalgoods.BillingResultMerger -> c.a.b.c.a.q:
    java.util.List mSubsResultsList -> e
    java.util.List mInAppResultsList -> c
    com.android.billingclient.api.BillingResult mSubsResult -> d
    com.google.androidbrowserhelper.playbilling.digitalgoods.BillingResultMerger$ResultListener mOnCombinedResult -> a
    com.android.billingclient.api.BillingResult mInAppResult -> b
    boolean didSucceed(com.android.billingclient.api.BillingResult) -> a
    void setInAppResult(com.android.billingclient.api.BillingResult,java.util.List) -> b
    void setSubsResult(com.android.billingclient.api.BillingResult,java.util.List) -> c
    void triggerIfReady() -> d
com.google.androidbrowserhelper.playbilling.digitalgoods.BillingResultMerger$ResultListener -> c.a.b.c.a.q$a:
    void onResult(com.android.billingclient.api.BillingResult,java.util.List) -> a
com.google.androidbrowserhelper.playbilling.digitalgoods.ConnectedBillingWrapper -> c.a.b.c.a.r:
    com.google.androidbrowserhelper.playbilling.provider.BillingWrapper mInner -> a
    java.util.List mPendingCallbacks -> c
    int mState -> b
    boolean launchPaymentFlow(android.app.Activity,com.android.billingclient.api.SkuDetails) -> a
    void querySkuDetails(java.lang.String,java.util.List,com.android.billingclient.api.SkuDetailsResponseListener) -> b
    void connect(com.android.billingclient.api.BillingClientStateListener) -> c
    void queryPurchases(java.lang.String,com.google.androidbrowserhelper.playbilling.provider.BillingWrapper$QueryPurchasesListener) -> d
    void consume(java.lang.String,com.android.billingclient.api.ConsumeResponseListener) -> e
    void acknowledge(java.lang.String,com.android.billingclient.api.AcknowledgePurchaseResponseListener) -> f
    int access$002(com.google.androidbrowserhelper.playbilling.digitalgoods.ConnectedBillingWrapper,int) -> g
    java.util.List access$100(com.google.androidbrowserhelper.playbilling.digitalgoods.ConnectedBillingWrapper) -> h
    void execute(java.lang.Runnable) -> i
    void lambda$acknowledge$3(java.lang.String,com.android.billingclient.api.AcknowledgePurchaseResponseListener) -> j
    void lambda$connect$0() -> k
    void lambda$consume$4(java.lang.String,com.android.billingclient.api.ConsumeResponseListener) -> l
    void lambda$queryPurchases$2(java.lang.String,com.google.androidbrowserhelper.playbilling.provider.BillingWrapper$QueryPurchasesListener) -> m
    void lambda$querySkuDetails$1(java.lang.String,java.util.List,com.android.billingclient.api.SkuDetailsResponseListener) -> n
com.google.androidbrowserhelper.playbilling.digitalgoods.ConnectedBillingWrapper$1 -> c.a.b.c.a.r$a:
    com.google.androidbrowserhelper.playbilling.digitalgoods.ConnectedBillingWrapper this$0 -> a
    void onBillingSetupFinished(com.android.billingclient.api.BillingResult) -> a
    void onBillingServiceDisconnected() -> b
com.google.androidbrowserhelper.playbilling.digitalgoods.DigitalGoodsCallback -> c.a.b.c.a.s:
    void run(java.lang.String,android.os.Bundle) -> a
com.google.androidbrowserhelper.playbilling.digitalgoods.DigitalGoodsConverter -> c.a.b.c.a.t:
    int toChromiumResponseCode(int) -> a
    int toChromiumResponseCode(com.android.billingclient.api.BillingResult) -> b
com.google.androidbrowserhelper.playbilling.digitalgoods.DigitalGoodsRequestHandler -> c.a.b.c.a.u:
    com.google.androidbrowserhelper.playbilling.provider.BillingWrapper mWrapper -> a
    com.google.androidbrowserhelper.playbilling.provider.BillingWrapper$Listener mListener -> b
    android.os.Bundle handleExtraCommand(android.content.Context,java.lang.String,android.os.Bundle,androidx.browser.trusted.TrustedWebActivityCallbackRemote) -> a
    boolean handle(java.lang.String,android.os.Bundle,com.google.androidbrowserhelper.playbilling.digitalgoods.DigitalGoodsCallback) -> b
    void lambda$handleExtraCommand$1(androidx.browser.trusted.TrustedWebActivityCallbackRemote,java.lang.String,android.os.Bundle) -> c
    void lambda$new$0(com.android.billingclient.api.BillingResult,java.lang.String) -> d
com.google.androidbrowserhelper.playbilling.digitalgoods.GetDetailsCall -> c.a.b.c.a.v:
    java.util.List mItemIds -> a
    com.google.androidbrowserhelper.playbilling.digitalgoods.DigitalGoodsCallback mCallback -> b
    void call(com.google.androidbrowserhelper.playbilling.provider.BillingWrapper) -> a
    com.google.androidbrowserhelper.playbilling.digitalgoods.GetDetailsCall create(android.os.Bundle,com.google.androidbrowserhelper.playbilling.digitalgoods.DigitalGoodsCallback) -> b
    void lambda$Xueomq9kG_vHW9pF5bbOTotDp7w(com.google.androidbrowserhelper.playbilling.digitalgoods.GetDetailsCall,com.android.billingclient.api.BillingResult,java.util.List) -> c
    void respond(com.android.billingclient.api.BillingResult,java.util.List) -> d
com.google.androidbrowserhelper.playbilling.digitalgoods.ItemDetails -> c.a.b.c.a.w:
    java.lang.String freeTrialPeriod -> g
    java.lang.String subscriptionPeriod -> f
    java.lang.String introductoryPriceCurrency -> i
    java.lang.String introductoryPricePeriod -> h
    java.lang.String introductoryPriceValue -> j
    java.lang.String id -> a
    java.lang.String description -> c
    java.lang.String title -> b
    java.lang.String value -> e
    java.lang.String currency -> d
    com.google.androidbrowserhelper.playbilling.digitalgoods.ItemDetails create(com.android.billingclient.api.SkuDetails) -> a
    android.os.Bundle toBundle() -> b
    java.lang.String toPrice(long) -> c
com.google.androidbrowserhelper.playbilling.digitalgoods.ListPurchasesCall -> c.a.b.c.a.x:
    com.google.androidbrowserhelper.playbilling.digitalgoods.DigitalGoodsCallback mCallback -> a
    void call(com.google.androidbrowserhelper.playbilling.provider.BillingWrapper) -> a
    com.google.androidbrowserhelper.playbilling.digitalgoods.ListPurchasesCall create(com.google.androidbrowserhelper.playbilling.digitalgoods.DigitalGoodsCallback) -> b
    void lambda$call$0(com.google.androidbrowserhelper.playbilling.digitalgoods.BillingResultMerger,com.android.billingclient.api.Purchase$PurchasesResult) -> c
    void lambda$call$1(com.google.androidbrowserhelper.playbilling.digitalgoods.BillingResultMerger,com.android.billingclient.api.Purchase$PurchasesResult) -> d
    void lambda$iXsEPC6b_wlX9_DcwbqI9_PVYaM(com.google.androidbrowserhelper.playbilling.digitalgoods.ListPurchasesCall,com.android.billingclient.api.BillingResult,java.util.List) -> e
    void respond(com.android.billingclient.api.BillingResult,java.util.List) -> f
com.google.androidbrowserhelper.playbilling.digitalgoods.Logging -> c.a.b.c.a.y:
    void logAckCall(java.lang.String,boolean) -> a
    void logAckResponse(com.android.billingclient.api.BillingResult,boolean) -> b
    void logConnected() -> c
    void logDisconnected() -> d
    void logGetDetailsCall(java.util.List) -> e
    void logGetDetailsResponse(com.android.billingclient.api.BillingResult) -> f
    void logListPurchasesCall() -> g
    void logListPurchasesResult(com.android.billingclient.api.BillingResult) -> h
    void logResult(com.android.billingclient.api.BillingResult,java.lang.String) -> i
    void logUnknownCommand(java.lang.String) -> j
    void logUnknownResultCode(int) -> k
com.google.androidbrowserhelper.playbilling.digitalgoods.PurchaseDetails -> c.a.b.c.a.z:
    long purchaseTimeMicrosecondsPastUnixEpoch -> e
    boolean willAutoRenew -> f
    java.lang.String id -> a
    int purchaseState -> d
    java.lang.String purchaseToken -> b
    boolean acknowledged -> c
    com.google.androidbrowserhelper.playbilling.digitalgoods.PurchaseDetails create(com.android.billingclient.api.Purchase) -> a
    long millisecondsToMicroseconds(long) -> b
    android.os.Bundle toBundle() -> c
    int toChromiumPurchaseState(int) -> d
com.google.androidbrowserhelper.playbilling.provider.-$$Lambda$PaymentActivity$wvUsqpGf8saAd1rxa4PrJY6UKyM -> com.google.androidbrowserhelper.playbilling.provider.a:
    com.google.androidbrowserhelper.playbilling.provider.PaymentActivity f$0 -> a
    void onResult(com.android.billingclient.api.BillingResult,java.util.List) -> a
com.google.androidbrowserhelper.playbilling.provider.-$$Lambda$eL9jPjNsWQu2Ye-9mQpvMjlui6c -> com.google.androidbrowserhelper.playbilling.provider.b:
    com.google.androidbrowserhelper.playbilling.digitalgoods.BillingResultMerger f$0 -> a
    void onSkuDetailsResponse(com.android.billingclient.api.BillingResult,java.util.List) -> a
com.google.androidbrowserhelper.playbilling.provider.-$$Lambda$l476L1D0lm9YZtEKrN2xDMd35YA -> com.google.androidbrowserhelper.playbilling.provider.c:
    com.google.androidbrowserhelper.playbilling.digitalgoods.BillingResultMerger f$0 -> a
    void onSkuDetailsResponse(com.android.billingclient.api.BillingResult,java.util.List) -> a
com.google.androidbrowserhelper.playbilling.provider.BillingWrapper -> com.google.androidbrowserhelper.playbilling.provider.d:
    boolean launchPaymentFlow(android.app.Activity,com.android.billingclient.api.SkuDetails) -> a
    void querySkuDetails(java.lang.String,java.util.List,com.android.billingclient.api.SkuDetailsResponseListener) -> b
    void connect(com.android.billingclient.api.BillingClientStateListener) -> c
    void queryPurchases(java.lang.String,com.google.androidbrowserhelper.playbilling.provider.BillingWrapper$QueryPurchasesListener) -> d
    void consume(java.lang.String,com.android.billingclient.api.ConsumeResponseListener) -> e
    void acknowledge(java.lang.String,com.android.billingclient.api.AcknowledgePurchaseResponseListener) -> f
com.google.androidbrowserhelper.playbilling.provider.BillingWrapper$Listener -> com.google.androidbrowserhelper.playbilling.provider.d$a:
    void onPurchaseFlowComplete(com.android.billingclient.api.BillingResult,java.lang.String) -> a
com.google.androidbrowserhelper.playbilling.provider.BillingWrapper$QueryPurchasesListener -> com.google.androidbrowserhelper.playbilling.provider.d$b:
    void onQueryPurchasesResponse(com.android.billingclient.api.Purchase$PurchasesResult) -> a
com.google.androidbrowserhelper.playbilling.provider.BillingWrapperFactory -> com.google.androidbrowserhelper.playbilling.provider.e:
    com.google.androidbrowserhelper.playbilling.provider.MockBillingWrapper sTestingBillingWrapper -> a
    com.google.androidbrowserhelper.playbilling.provider.BillingWrapper get(android.content.Context,com.google.androidbrowserhelper.playbilling.provider.BillingWrapper$Listener) -> a
com.google.androidbrowserhelper.playbilling.provider.Logging -> com.google.androidbrowserhelper.playbilling.provider.f:
    void logLaunchPaymentFlow(com.android.billingclient.api.BillingResult) -> a
    void logPurchasesUpdate(com.android.billingclient.api.BillingResult,java.util.List) -> b
    void logResult(com.android.billingclient.api.BillingResult,java.lang.String) -> c
com.google.androidbrowserhelper.playbilling.provider.MethodData -> com.google.androidbrowserhelper.playbilling.provider.g:
    java.lang.String sku -> a
    com.google.androidbrowserhelper.playbilling.provider.MethodData fromIntent(android.content.Intent) -> a
    com.google.androidbrowserhelper.playbilling.provider.MethodData fromJson(java.lang.String) -> b
    com.google.androidbrowserhelper.playbilling.provider.MethodData fromJsonInner(java.lang.String) -> c
com.google.androidbrowserhelper.playbilling.provider.MockBillingWrapper -> com.google.androidbrowserhelper.playbilling.provider.h:
    void setListener(com.google.androidbrowserhelper.playbilling.provider.BillingWrapper$Listener) -> g
com.google.androidbrowserhelper.playbilling.provider.PaymentActivity -> com.google.androidbrowserhelper.playbilling.provider.PaymentActivity:
    com.google.androidbrowserhelper.playbilling.provider.BillingWrapper mWrapper -> a
    com.google.androidbrowserhelper.playbilling.provider.MethodData mMethodData -> b
    void onPurchaseFlowComplete(com.android.billingclient.api.BillingResult,java.lang.String) -> a
    void fail(java.lang.String) -> b
    void lambda$onConnected$0(com.android.billingclient.api.BillingResult,java.util.List) -> c
    void onConnected() -> d
    void onDisconnected() -> e
    void setResultAndFinish(com.google.androidbrowserhelper.playbilling.provider.PaymentResult) -> f
com.google.androidbrowserhelper.playbilling.provider.PaymentActivity$1 -> com.google.androidbrowserhelper.playbilling.provider.PaymentActivity$a:
    com.google.androidbrowserhelper.playbilling.provider.PaymentActivity this$0 -> a
    void onBillingSetupFinished(com.android.billingclient.api.BillingResult) -> a
    void onBillingServiceDisconnected() -> b
com.google.androidbrowserhelper.playbilling.provider.PaymentResult -> com.google.androidbrowserhelper.playbilling.provider.i:
    com.google.androidbrowserhelper.playbilling.provider.PaymentResult failure(java.lang.String) -> a
    int getActivityResult() -> b
    java.lang.String getDetails() -> c
    void log() -> d
    com.google.androidbrowserhelper.playbilling.provider.PaymentResult success(java.lang.String) -> e
    org.json.JSONObject toJson() -> f
com.google.androidbrowserhelper.playbilling.provider.PaymentResult$1 -> com.google.androidbrowserhelper.playbilling.provider.i$a:
com.google.androidbrowserhelper.playbilling.provider.PaymentResult$Failure -> com.google.androidbrowserhelper.playbilling.provider.i$b:
    java.lang.String mError -> a
    int getActivityResult() -> b
    void log() -> d
    org.json.JSONObject toJson() -> f
com.google.androidbrowserhelper.playbilling.provider.PaymentResult$Success -> com.google.androidbrowserhelper.playbilling.provider.i$c:
    java.lang.String mPurchaseToken -> a
    int getActivityResult() -> b
    void log() -> d
    org.json.JSONObject toJson() -> f
com.google.androidbrowserhelper.playbilling.provider.PaymentService -> com.google.androidbrowserhelper.playbilling.provider.PaymentService:
    android.os.IBinder mBinder -> a
com.google.androidbrowserhelper.playbilling.provider.PaymentService$1 -> com.google.androidbrowserhelper.playbilling.provider.PaymentService$a:
    com.google.androidbrowserhelper.playbilling.provider.PaymentService this$0 -> a
    void isReadyToPay(org.chromium.IsReadyToPayServiceCallback) -> l
com.google.androidbrowserhelper.playbilling.provider.PaymentVerifier -> com.google.androidbrowserhelper.playbilling.provider.j:
    boolean shouldAllowPayments(android.content.Context,java.lang.String,java.lang.String) -> a
com.google.androidbrowserhelper.playbilling.provider.PlayBillingWrapper -> com.google.androidbrowserhelper.playbilling.provider.k:
    com.android.billingclient.api.PurchasesUpdatedListener mPurchaseUpdateListener -> c
    com.google.androidbrowserhelper.playbilling.provider.BillingWrapper$Listener mListener -> a
    com.android.billingclient.api.BillingClient mClient -> b
    boolean launchPaymentFlow(android.app.Activity,com.android.billingclient.api.SkuDetails) -> a
    void querySkuDetails(java.lang.String,java.util.List,com.android.billingclient.api.SkuDetailsResponseListener) -> b
    void connect(com.android.billingclient.api.BillingClientStateListener) -> c
    void queryPurchases(java.lang.String,com.google.androidbrowserhelper.playbilling.provider.BillingWrapper$QueryPurchasesListener) -> d
    void consume(java.lang.String,com.android.billingclient.api.ConsumeResponseListener) -> e
    void acknowledge(java.lang.String,com.android.billingclient.api.AcknowledgePurchaseResponseListener) -> f
    com.google.androidbrowserhelper.playbilling.provider.BillingWrapper$Listener access$000(com.google.androidbrowserhelper.playbilling.provider.PlayBillingWrapper) -> g
com.google.androidbrowserhelper.playbilling.provider.PlayBillingWrapper$1 -> com.google.androidbrowserhelper.playbilling.provider.k$a:
    com.google.androidbrowserhelper.playbilling.provider.PlayBillingWrapper this$0 -> a
    void onPurchasesUpdated(com.android.billingclient.api.BillingResult,java.util.List) -> a
com.google.androidbrowserhelper.trusted.-$$Lambda$LauncherActivity$LZZem-OVKpJSpGjllWq0Ukdbzw4 -> com.google.androidbrowserhelper.trusted.a:
    com.google.androidbrowserhelper.trusted.LauncherActivity f$0 -> a
com.google.androidbrowserhelper.trusted.-$$Lambda$QualityEnforcer$O7M60XogyFoU3Yrobh4EpLi-gJI -> com.google.androidbrowserhelper.trusted.b:
    java.lang.String f$0 -> a
com.google.androidbrowserhelper.trusted.-$$Lambda$QualityEnforcer$f3ToHUoPyVxa3nSgg0JqkxijMsY -> com.google.androidbrowserhelper.trusted.c:
    com.google.androidbrowserhelper.trusted.-$$Lambda$QualityEnforcer$f3ToHUoPyVxa3nSgg0JqkxijMsY INSTANCE -> a
    void crash(java.lang.String) -> a
com.google.androidbrowserhelper.trusted.-$$Lambda$TwaLauncher$2_WgvxzfVC37jA8J_KJi3c4y8CE -> com.google.androidbrowserhelper.trusted.d:
    java.lang.Runnable f$3 -> d
    com.google.androidbrowserhelper.trusted.TwaLauncher f$0 -> a
    com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy f$1 -> b
    androidx.browser.trusted.TrustedWebActivityIntentBuilder f$2 -> c
com.google.androidbrowserhelper.trusted.-$$Lambda$TwaLauncher$8I-QaLd1-mY1X-hUnuTTCupEpIw -> com.google.androidbrowserhelper.trusted.e:
    java.lang.Runnable f$3 -> d
    com.google.androidbrowserhelper.trusted.splashscreens.SplashScreenStrategy f$2 -> c
    com.google.androidbrowserhelper.trusted.TwaLauncher f$0 -> a
    androidx.browser.trusted.TrustedWebActivityIntentBuilder f$1 -> b
com.google.androidbrowserhelper.trusted.-$$Lambda$TwaLauncher$gs2l5Ay3A0KmZcKSf2KLU2Jn7NA -> com.google.androidbrowserhelper.trusted.f:
    com.google.androidbrowserhelper.trusted.-$$Lambda$TwaLauncher$gs2l5Ay3A0KmZcKSf2KLU2Jn7NA INSTANCE -> a
    void launch(android.content.Context,androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.String,java.lang.Runnable) -> a
com.google.androidbrowserhelper.trusted.-$$Lambda$TwaLauncher$npRr6qK4zOAEydIRgB7pZTPJiUw -> com.google.androidbrowserhelper.trusted.g:
    java.lang.Runnable f$2 -> c
    com.google.androidbrowserhelper.trusted.TwaLauncher f$0 -> a
    androidx.browser.trusted.TrustedWebActivityIntentBuilder f$1 -> b
com.google.androidbrowserhelper.trusted.-$$Lambda$TwaLauncher$yiLzsm37NbSon1-dZ2dCvDJv8wU -> com.google.androidbrowserhelper.trusted.h:
    com.google.androidbrowserhelper.trusted.-$$Lambda$TwaLauncher$yiLzsm37NbSon1-dZ2dCvDJv8wU INSTANCE -> a
    void launch(android.content.Context,androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.String,java.lang.Runnable) -> a
com.google.androidbrowserhelper.trusted.ChromeLegacyUtils -> com.google.androidbrowserhelper.trusted.i:
    java.util.List VERSION_CHECK_CHROME_PACKAGES -> b
    java.util.List SUPPORTED_CHROME_PACKAGES -> a
    java.util.List LOCAL_BUILD_PACKAGES -> c
    boolean checkChromeVersion(android.content.pm.PackageManager,java.lang.String,int) -> a
    int getVersionCode(android.content.pm.PackageManager,java.lang.String) -> b
    boolean supportsLaunchWithoutWarmup(android.content.pm.PackageManager,java.lang.String) -> c
    boolean supportsManageSpaceWithoutWarmupAndValidation(android.content.pm.PackageManager,java.lang.String) -> d
    boolean supportsNavbarAndColorCustomization(android.content.pm.PackageManager,java.lang.String) -> e
    boolean supportsSiteSettings(android.content.pm.PackageManager,java.lang.String) -> f
    boolean supportsTrustedWebActivities(android.content.pm.PackageManager,java.lang.String) -> g
    boolean usesWhiteNavbar(java.lang.String) -> h
com.google.androidbrowserhelper.trusted.ChromeOsSupport -> com.google.androidbrowserhelper.trusted.j:
    boolean isRunningOnArc(android.content.pm.PackageManager) -> a
com.google.androidbrowserhelper.trusted.ChromeUpdatePrompt -> com.google.androidbrowserhelper.trusted.k:
    boolean chromeNeedsUpdate(android.content.pm.PackageManager,java.lang.String) -> a
    void promptIfNeeded(android.content.Context,java.lang.String) -> b
    void showToastIfResourceExists(android.content.Context,java.lang.String) -> c
com.google.androidbrowserhelper.trusted.DelegationService -> com.google.androidbrowserhelper.trusted.l:
    java.util.List mExtraCommandHandlers -> d
    androidx.browser.trusted.TokenStore getTokenStore() -> c
    android.os.Bundle onExtraCommand(java.lang.String,android.os.Bundle,androidx.browser.trusted.TrustedWebActivityCallbackRemote) -> f
    void registerExtraCommandHandler(com.google.androidbrowserhelper.trusted.ExtraCommandHandler) -> k
com.google.androidbrowserhelper.trusted.ExtraCommandHandler -> com.google.androidbrowserhelper.trusted.m:
    android.os.Bundle handleExtraCommand(android.content.Context,java.lang.String,android.os.Bundle,androidx.browser.trusted.TrustedWebActivityCallbackRemote) -> a
com.google.androidbrowserhelper.trusted.FocusActivity -> com.google.androidbrowserhelper.trusted.FocusActivity:
    java.lang.Boolean mActivityExistsCached -> a
    void addToIntent(android.content.Intent,android.content.Context) -> a
com.google.androidbrowserhelper.trusted.LauncherActivity -> com.google.androidbrowserhelper.trusted.n:
    androidx.browser.customtabs.CustomTabsCallback mCustomTabsCallback -> d
    boolean sChromeVersionChecked -> f
    com.google.androidbrowserhelper.trusted.splashscreens.PwaWrapperSplashScreenStrategy mSplashScreenStrategy -> c
    com.google.androidbrowserhelper.trusted.TwaLauncher mTwaLauncher -> e
    com.google.androidbrowserhelper.trusted.LauncherActivityMetadata mMetadata -> a
    boolean mBrowserWasLaunched -> b
    void addShareDataIfPresent(androidx.browser.trusted.TrustedWebActivityIntentBuilder) -> a
    com.google.androidbrowserhelper.trusted.TwaLauncher createTwaLauncher() -> b
    int getColorCompat(int) -> c
    androidx.browser.trusted.TrustedWebActivityDisplayMode getDisplayMode() -> d
    com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy getFallbackStrategy() -> e
    android.net.Uri getLaunchingUrl() -> f
    android.widget.ImageView$ScaleType getSplashImageScaleType() -> g
    android.graphics.Matrix getSplashImageTransformationMatrix() -> h
    void lambda$onCreate$0() -> i
    boolean restartInNewTask() -> j
    boolean splashScreenNeeded() -> k
com.google.androidbrowserhelper.trusted.LauncherActivityMetadata -> com.google.androidbrowserhelper.trusted.o:
    int screenOrientation -> o
    java.lang.String fileProviderAuthority -> j
    int splashScreenFadeOutDurationMillis -> k
    int splashImageDrawableId -> h
    java.lang.String fallbackStrategyType -> m
    int splashScreenBackgroundColorId -> i
    int navigationBarDividerColorId -> f
    int navigationBarDividerColorDarkId -> g
    int navigationBarColorId -> d
    int navigationBarColorDarkId -> e
    java.lang.String shareTarget -> p
    int statusBarColorId -> b
    int statusBarColorDarkId -> c
    androidx.browser.trusted.TrustedWebActivityDisplayMode displayMode -> n
    java.lang.String defaultUrl -> a
    java.util.List additionalTrustedOrigins -> l
    androidx.browser.trusted.TrustedWebActivityDisplayMode getDisplayMode(android.os.Bundle) -> a
    int getOrientation(java.lang.String) -> b
    com.google.androidbrowserhelper.trusted.LauncherActivityMetadata parse(android.content.Context) -> c
com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity -> com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity:
    androidx.browser.customtabs.CustomTabsServiceConnection mConnection -> b
    java.lang.String mProviderPackage -> a
    void access$200(com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity,androidx.browser.customtabs.CustomTabsSession) -> a
    void addSiteSettingsShortcut(android.content.Context,java.lang.String) -> b
    android.view.View createLoadingView() -> c
    android.net.Uri getDefaultUrlForManagingSpace() -> d
    android.content.pm.ShortcutInfo getSiteSettingsShortcutOrNull(android.content.Context,android.content.pm.PackageManager) -> e
    void handleNoSupportForManageSpace() -> f
    void handleTwaNeverLaunched() -> g
    boolean launchBrowserSiteSettings(android.app.Activity,androidx.browser.customtabs.CustomTabsSession,java.lang.String,android.net.Uri) -> h
    void launchSettings(androidx.browser.customtabs.CustomTabsSession) -> i
    void onError(java.lang.RuntimeException) -> j
    boolean packageSupportsSiteSettings(java.lang.String,android.content.pm.PackageManager) -> k
    boolean supportsTrustedWebActivities(java.lang.String) -> l
com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity$1 -> com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity$a:
com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity$Connection -> com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity$b:
    com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity this$0 -> b
    void onCustomTabsServiceConnected(android.content.ComponentName,androidx.browser.customtabs.CustomTabsClient) -> a
com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity$LegacyChromeConnection -> com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity$c:
    androidx.browser.customtabs.CustomTabsCallback mCustomTabsCallback -> c
    androidx.browser.customtabs.CustomTabsSession mSession -> b
    com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity this$0 -> d
    void onCustomTabsServiceConnected(android.content.ComponentName,androidx.browser.customtabs.CustomTabsClient) -> a
    androidx.browser.customtabs.CustomTabsSession access$300(com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity$LegacyChromeConnection) -> c
com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity$LegacyChromeConnection$1 -> com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity$c$a:
    com.google.androidbrowserhelper.trusted.ManageDataLauncherActivity$LegacyChromeConnection this$1 -> a
    void onRelationshipValidationResult(int,android.net.Uri,boolean,android.os.Bundle) -> f
com.google.androidbrowserhelper.trusted.QualityEnforcer -> com.google.androidbrowserhelper.trusted.p:
    com.google.androidbrowserhelper.trusted.QualityEnforcer$Delegate mDelegate -> a
    android.os.Bundle extraCallbackWithResult(java.lang.String,android.os.Bundle) -> b
    void lambda$new$1(java.lang.String) -> g
    void lambda$null$0(java.lang.String) -> h
com.google.androidbrowserhelper.trusted.QualityEnforcer$Delegate -> com.google.androidbrowserhelper.trusted.p$a:
    void crash(java.lang.String) -> a
com.google.androidbrowserhelper.trusted.SharedPreferencesTokenStore -> com.google.androidbrowserhelper.trusted.q:
    android.content.Context mContext -> a
    void store(androidx.browser.trusted.Token) -> a
    androidx.browser.trusted.Token load() -> b
com.google.androidbrowserhelper.trusted.SharingUtils -> com.google.androidbrowserhelper.trusted.r:
    java.util.List parseAcceptedTypes(java.lang.Object) -> a
    java.util.List parseFiles(org.json.JSONArray) -> b
    androidx.browser.trusted.sharing.ShareTarget parseShareTargetJson(java.lang.String) -> c
    androidx.browser.trusted.sharing.ShareData retrieveShareDataFromIntent(android.content.Intent) -> d
com.google.androidbrowserhelper.trusted.TwaLauncher -> com.google.androidbrowserhelper.trusted.s:
    android.content.Context mContext -> a
    androidx.browser.trusted.TokenStore mTokenStore -> g
    androidx.browser.customtabs.CustomTabsSession mSession -> f
    com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy WEBVIEW_FALLBACK_STRATEGY -> j
    com.google.androidbrowserhelper.trusted.TwaLauncher$TwaCustomTabsServiceConnection mServiceConnection -> e
    com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy CCT_FALLBACK_STRATEGY -> i
    int mSessionId -> d
    boolean mDestroyed -> h
    java.lang.String mProviderPackage -> b
    int mLaunchMode -> c
    android.content.Context access$100(com.google.androidbrowserhelper.trusted.TwaLauncher) -> a
    java.lang.String access$200(com.google.androidbrowserhelper.trusted.TwaLauncher) -> b
    androidx.browser.customtabs.CustomTabsSession access$300(com.google.androidbrowserhelper.trusted.TwaLauncher) -> c
    androidx.browser.customtabs.CustomTabsSession access$302(com.google.androidbrowserhelper.trusted.TwaLauncher,androidx.browser.customtabs.CustomTabsSession) -> d
    int access$400(com.google.androidbrowserhelper.trusted.TwaLauncher) -> e
    void destroy() -> f
    java.lang.String getProviderPackage() -> g
    void lambda$launchTwa$2(androidx.browser.trusted.TrustedWebActivityIntentBuilder,com.google.androidbrowserhelper.trusted.splashscreens.SplashScreenStrategy,java.lang.Runnable) -> h
    void lambda$launchTwa$3(com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy,androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.Runnable) -> i
    void lambda$launchWhenSessionEstablished$4(androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.Runnable) -> j
    void lambda$static$0(android.content.Context,androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.String,java.lang.Runnable) -> k
    void lambda$static$1(android.content.Context,androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.String,java.lang.Runnable) -> l
    void launch(androidx.browser.trusted.TrustedWebActivityIntentBuilder,androidx.browser.customtabs.CustomTabsCallback,com.google.androidbrowserhelper.trusted.splashscreens.SplashScreenStrategy,java.lang.Runnable,com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy) -> m
    void launchTwa(androidx.browser.trusted.TrustedWebActivityIntentBuilder,androidx.browser.customtabs.CustomTabsCallback,com.google.androidbrowserhelper.trusted.splashscreens.SplashScreenStrategy,java.lang.Runnable,com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy) -> n
    void launchWhenSessionEstablished(androidx.browser.trusted.TrustedWebActivityIntentBuilder,com.google.androidbrowserhelper.trusted.splashscreens.SplashScreenStrategy,java.lang.Runnable) -> o
    void launchWhenSplashScreenReady(androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.Runnable) -> p
com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy -> com.google.androidbrowserhelper.trusted.s$a:
    void launch(android.content.Context,androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.String,java.lang.Runnable) -> a
com.google.androidbrowserhelper.trusted.TwaLauncher$TwaCustomTabsServiceConnection -> com.google.androidbrowserhelper.trusted.s$b:
    java.lang.Runnable mOnSessionCreationFailedRunnable -> c
    java.lang.Runnable mOnSessionCreatedRunnable -> b
    androidx.browser.customtabs.CustomTabsCallback mCustomTabsCallback -> d
    com.google.androidbrowserhelper.trusted.TwaLauncher this$0 -> e
    void onCustomTabsServiceConnected(android.content.ComponentName,androidx.browser.customtabs.CustomTabsClient) -> a
    void access$000(com.google.androidbrowserhelper.trusted.TwaLauncher$TwaCustomTabsServiceConnection,java.lang.Runnable,java.lang.Runnable) -> c
    void setSessionCreationRunnables(java.lang.Runnable,java.lang.Runnable) -> d
com.google.androidbrowserhelper.trusted.TwaProviderPicker -> com.google.androidbrowserhelper.trusted.t:
    java.lang.String sPackageNameForTesting -> a
    java.util.Map getLaunchModesForCustomTabsServices(android.content.pm.PackageManager) -> a
    com.google.androidbrowserhelper.trusted.TwaProviderPicker$Action pickProvider(android.content.pm.PackageManager) -> b
com.google.androidbrowserhelper.trusted.TwaProviderPicker$Action -> com.google.androidbrowserhelper.trusted.t$a:
    java.lang.String provider -> b
    int launchMode -> a
com.google.androidbrowserhelper.trusted.TwaSharedPreferencesManager -> com.google.androidbrowserhelper.trusted.u:
    android.content.SharedPreferences mSharedPreferences -> a
    java.lang.String readLastLaunchedProviderPackageName() -> a
    void writeLastLaunchedProviderPackageName(java.lang.String) -> b
com.google.androidbrowserhelper.trusted.Utils -> com.google.androidbrowserhelper.trusted.v:
    void addSystemUiVisibilityFlag(android.app.Activity,int) -> a
    android.graphics.Bitmap convertDrawableToBitmap(android.content.Context,int) -> b
    float luminanceOfColorComponent(float) -> c
    void setNavigationBarColor(android.app.Activity,int) -> d
    void setStatusBarColor(android.app.Activity,int) -> e
    boolean shouldUseDarkIconsOnBackground(int) -> f
com.google.androidbrowserhelper.trusted.WebViewFallbackActivity -> com.google.androidbrowserhelper.trusted.WebViewFallbackActivity:
    java.util.List mExtraOrigins -> d
    android.webkit.WebView mWebView -> c
    int mStatusBarColor -> b
    java.lang.String TAG -> e
    android.net.Uri mLaunchUrl -> a
    android.webkit.WebView access$000(com.google.androidbrowserhelper.trusted.WebViewFallbackActivity) -> a
    android.webkit.WebView access$002(com.google.androidbrowserhelper.trusted.WebViewFallbackActivity,android.webkit.WebView) -> b
    void access$100(android.webkit.WebSettings) -> c
    android.net.Uri access$200(com.google.androidbrowserhelper.trusted.WebViewFallbackActivity) -> d
    int access$300(com.google.androidbrowserhelper.trusted.WebViewFallbackActivity) -> e
    java.util.List access$400(com.google.androidbrowserhelper.trusted.WebViewFallbackActivity) -> f
    android.content.Intent createLaunchIntent(android.content.Context,android.net.Uri,com.google.androidbrowserhelper.trusted.LauncherActivityMetadata) -> g
    android.webkit.WebViewClient createWebViewClient() -> h
    void setupWebSettings(android.webkit.WebSettings) -> i
com.google.androidbrowserhelper.trusted.WebViewFallbackActivity$1 -> com.google.androidbrowserhelper.trusted.WebViewFallbackActivity$a:
    com.google.androidbrowserhelper.trusted.WebViewFallbackActivity this$0 -> a
    boolean matchExtraOrigins(android.net.Uri) -> a
    boolean shouldOverrideUrlLoading(android.net.Uri) -> b
    boolean uriOriginsMatch(android.net.Uri,android.net.Uri) -> c
com.google.androidbrowserhelper.trusted.splashscreens.-$$Lambda$PwaWrapperSplashScreenStrategy$jhTvWgJ8R6krB2fU0teia2GQ7WA -> com.google.androidbrowserhelper.trusted.w.a:
    java.lang.Runnable f$1 -> b
    com.google.androidbrowserhelper.trusted.splashscreens.PwaWrapperSplashScreenStrategy f$0 -> a
com.google.androidbrowserhelper.trusted.splashscreens.-$$Lambda$PwaWrapperSplashScreenStrategy$w9o5iqMEy62ZZ2i_sMAmRiQ7IGw -> com.google.androidbrowserhelper.trusted.w.b:
    java.lang.Runnable f$2 -> c
    com.google.androidbrowserhelper.trusted.splashscreens.PwaWrapperSplashScreenStrategy f$0 -> a
    androidx.browser.trusted.TrustedWebActivityIntentBuilder f$1 -> b
    void onFinished(boolean) -> a
com.google.androidbrowserhelper.trusted.splashscreens.PwaWrapperSplashScreenStrategy -> com.google.androidbrowserhelper.trusted.w.c:
    java.lang.String mFileProviderAuthority -> f
    android.widget.ImageView$ScaleType mScaleType -> d
    java.lang.String mProviderPackage -> j
    boolean mProviderSupportsSplashScreens -> k
    boolean mEnterAnimationComplete -> l
    com.google.androidbrowserhelper.trusted.splashscreens.SystemBarColorPredictor sSystemBarColorPredictor -> n
    int mFadeOutDurationMillis -> g
    int mDrawableId -> b
    int mBackgroundColor -> c
    android.graphics.Bitmap mSplashImage -> h
    com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask mSplashImageTransferTask -> i
    java.lang.Runnable mOnEnterAnimationCompleteRunnable -> m
    android.graphics.Matrix mTransformationMatrix -> e
    android.app.Activity mActivity -> a
    void configureTwaBuilder(androidx.browser.trusted.TrustedWebActivityIntentBuilder,androidx.browser.customtabs.CustomTabsSession,java.lang.Runnable) -> a
    void onTwaLaunchInitiated(java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder) -> b
    void customizeStatusAndNavBarDuringSplashScreen(java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder) -> c
    void destroy() -> d
    void lambda$configureTwaBuilder$0(androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.Runnable,boolean) -> e
    void lambda$onSplashImageTransferred$1(java.lang.Runnable) -> f
    android.os.Bundle makeSplashScreenParamsBundle() -> g
    void onActivityEnterAnimationComplete() -> h
    void onSplashImageTransferred(androidx.browser.trusted.TrustedWebActivityIntentBuilder,boolean,java.lang.Runnable) -> i
    void runWhenEnterAnimationComplete(java.lang.Runnable) -> j
    void showSplashScreen() -> k
com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask -> com.google.androidbrowserhelper.trusted.w.d:
    android.content.Context mContext -> a
    androidx.browser.customtabs.CustomTabsSession mSession -> d
    android.graphics.Bitmap mBitmap -> b
    com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask$Callback mCallback -> f
    java.lang.String mAuthority -> c
    android.os.AsyncTask mAsyncTask -> g
    java.lang.String mProviderPackage -> e
    android.content.Context access$000(com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask) -> a
    android.graphics.Bitmap access$100(com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask) -> b
    java.lang.String access$200(com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask) -> c
    java.lang.String access$300(com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask) -> d
    androidx.browser.customtabs.CustomTabsSession access$400(com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask) -> e
    com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask$Callback access$500(com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask) -> f
    void cancel() -> g
    void execute(com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask$Callback) -> h
com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask$1 -> com.google.androidbrowserhelper.trusted.w.d$a:
    com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask this$0 -> a
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    long getLastAppUpdateTime() -> b
    void onPostExecute(java.lang.Boolean) -> c
    boolean transferToCustomTabsProvider(java.io.File) -> d
com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask$Callback -> com.google.androidbrowserhelper.trusted.w.d$b:
    void onFinished(boolean) -> a
com.google.androidbrowserhelper.trusted.splashscreens.SplashScreenStrategy -> com.google.androidbrowserhelper.trusted.w.e:
    void configureTwaBuilder(androidx.browser.trusted.TrustedWebActivityIntentBuilder,androidx.browser.customtabs.CustomTabsSession,java.lang.Runnable) -> a
    void onTwaLaunchInitiated(java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder) -> b
com.google.androidbrowserhelper.trusted.splashscreens.SystemBarColorPredictor -> com.google.androidbrowserhelper.trusted.w.f:
    java.util.Map mSupportedFeaturesCache -> a
    int getExpectedColorScheme(android.content.Context,androidx.browser.trusted.TrustedWebActivityIntentBuilder) -> a
    java.lang.Integer getExpectedNavbarColor(android.content.Context,java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder) -> b
    java.lang.Integer getExpectedStatusBarColor(android.content.Context,java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder) -> c
    com.google.androidbrowserhelper.trusted.splashscreens.SystemBarColorPredictor$SupportedFeatures getSupportedFeatures(android.content.Context,java.lang.String) -> d
    boolean hasCategory(android.content.pm.ResolveInfo,java.lang.String) -> e
    boolean providerSupportsColorSchemeParams(android.content.Context,java.lang.String) -> f
    boolean providerSupportsNavBarColorCustomization(android.content.Context,java.lang.String) -> g
com.google.androidbrowserhelper.trusted.splashscreens.SystemBarColorPredictor$1 -> com.google.androidbrowserhelper.trusted.w.f$a:
com.google.androidbrowserhelper.trusted.splashscreens.SystemBarColorPredictor$SupportedFeatures -> com.google.androidbrowserhelper.trusted.w.f$b:
    boolean navbarColorCustomization -> a
    boolean colorSchemeCustomization -> b
nl.stevie.ray.hangtime.LauncherActivity -> nl.stevie.ray.hangtime.LauncherActivity:
    android.net.Uri getLaunchingUrl() -> f
org.chromium.IsReadyToPayService -> d.a.a:
    void isReadyToPay(org.chromium.IsReadyToPayServiceCallback) -> l
org.chromium.IsReadyToPayService$Stub -> d.a.a$a:
org.chromium.IsReadyToPayServiceCallback -> d.a.b:
    void handleIsReadyToPay(boolean) -> c
org.chromium.IsReadyToPayServiceCallback$Stub -> d.a.b$a:
    org.chromium.IsReadyToPayServiceCallback asInterface(android.os.IBinder) -> G
    org.chromium.IsReadyToPayServiceCallback getDefaultImpl() -> H
org.chromium.IsReadyToPayServiceCallback$Stub$Proxy -> d.a.b$a$a:
    android.os.IBinder mRemote -> a
    org.chromium.IsReadyToPayServiceCallback sDefaultImpl -> b
    void handleIsReadyToPay(boolean) -> c
